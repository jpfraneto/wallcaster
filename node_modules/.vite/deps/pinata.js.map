{
  "version": 3,
  "sources": ["../../pinata/src/utils/custom-errors.ts", "../../pinata/src/utils/gateway-tools.ts", "../../pinata/src/utils/resumable.ts", "../../pinata/src/utils/format-config.ts", "../../pinata/src/react/hooks/useUpload.ts", "../../pinata/src/core/functions/analytics/analyticsDateInterval.ts", "../../pinata/src/core/functions/analytics/analyticsTopUsage.ts", "../../pinata/src/core/functions/authentication/testAuthentication.ts", "../../pinata/src/core/functions/files/delete.ts", "../../pinata/src/core/functions/files/deleteFileVectors.ts", "../../pinata/src/core/functions/files/deleteSwap.ts", "../../pinata/src/core/functions/files/list.ts", "../../pinata/src/core/functions/files/pinnedFileUsage.ts", "../../pinata/src/core/functions/files/swapCid.ts", "../../pinata/src/core/functions/files/swapHistory.ts", "../../pinata/src/core/functions/files/totalStorageUsage.ts", "../../pinata/src/core/functions/files/updateFile.ts", "../../pinata/src/core/functions/files/vectorizeFile.ts", "../../pinata/src/core/functions/files/vectorizeQuery.ts", "../../pinata/src/core/functions/files/queue.ts", "../../pinata/src/core/functions/files/deletePinRequest.ts", "../../pinata/src/core/functions/gateway/getCid.ts", "../../pinata/src/core/functions/gateway/convertIPFSUrl.ts", "../../pinata/src/core/functions/gateway/createAccessLink.ts", "../../pinata/src/core/functions/groups/addToGroup.ts", "../../pinata/src/core/functions/groups/createGroup.ts", "../../pinata/src/core/functions/groups/deleteGroup.ts", "../../pinata/src/core/functions/groups/getGroup.ts", "../../pinata/src/core/functions/groups/listGroups.ts", "../../pinata/src/core/functions/groups/removeFromGroup.ts", "../../pinata/src/core/functions/groups/updateGroup.ts", "../../pinata/src/core/functions/keys/createKey.ts", "../../pinata/src/core/functions/keys/listKeys.ts", "../../pinata/src/core/functions/keys/revokeKeys.ts", "../../pinata/src/core/functions/uploads/base64.ts", "../../pinata/src/core/functions/uploads/createSignedUploadURL.ts", "../../pinata/src/core/functions/uploads/file.ts", "../../pinata/src/core/functions/uploads/fileArray.ts", "../../pinata/src/core/functions/uploads/json.ts", "../../pinata/src/core/functions/uploads/url.ts", "../../pinata/src/core/functions/uploads/cid.ts", "../../pinata/src/core/classes/analytics/Analytics.ts", "../../pinata/src/core/classes/analytics/utils.ts", "../../pinata/src/core/classes/analytics/AnalyticsFilter.ts", "../../pinata/src/core/classes/analytics/AnalyticsBandwidth.ts", "../../pinata/src/core/classes/analytics/AnalyticsBuilder.ts", "../../pinata/src/core/classes/analytics/AnalyticsRequests.ts", "../../pinata/src/core/classes/analytics/TimeIntervalAnalyticsBuilder.ts", "../../pinata/src/core/classes/groups/GroupsFilter.ts", "../../pinata/src/core/classes/groups/PublicGroups.ts", "../../pinata/src/core/classes/groups/PrivateGroups.ts", "../../pinata/src/core/classes/groups/Groups.ts", "../../pinata/src/core/classes/keys/Keys.ts", "../../pinata/src/core/classes/keys/FilterKeys.ts", "../../pinata/src/core/classes/gateways/Gateways.ts", "../../pinata/src/core/classes/gateways/OptimizeImageCreateSignedUrl.ts", "../../pinata/src/core/classes/gateways/OptimizeImageGetCid.ts", "../../pinata/src/core/classes/gateways/PrivateGateways.ts", "../../pinata/src/core/classes/gateways/PublicGateways.ts", "../../pinata/src/core/functions/files/getFile.ts", "../../pinata/src/core/classes/files/FilterFiles.ts", "../../pinata/src/core/classes/files/FilterQueue.ts", "../../pinata/src/core/classes/files/PublicFiles.ts", "../../pinata/src/core/classes/files/PrivateFiles.ts", "../../pinata/src/core/classes/files/Files.ts", "../../pinata/src/core/classes/uploads/UploadBuilder.ts", "../../pinata/src/core/classes/uploads/PublicUpload.ts", "../../pinata/src/core/classes/uploads/PrivateUpload.ts", "../../pinata/src/core/classes/uploads/Upload.ts", "../../pinata/src/core/functions/signatures/addSignature.ts", "../../pinata/src/core/functions/signatures/getSignature.ts", "../../pinata/src/core/functions/signatures/removeSignature.ts", "../../pinata/src/core/classes/signatures/PublicSignatures.ts", "../../pinata/src/core/classes/signatures/Signatures.ts", "../../pinata/src/core/pinataSDK.ts"],
  "sourcesContent": ["interface ErrorDetails {\n\terror?: string;\n\tcode?: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport class PinataError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic statusCode?: number,\n\t\tpublic details?: ErrorDetails,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = \"PinataError\";\n\t}\n}\n\nexport class NetworkError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"NetworkError\";\n\t}\n}\n\nexport class AuthenticationError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"AuthenticationError\";\n\t}\n}\n\nexport class ValidationError extends PinataError {\n\tconstructor(message: string, details?: ErrorDetails) {\n\t\tsuper(message, undefined, details);\n\t\tthis.name = \"ValidationError\";\n\t}\n}\n", "import { ContainsCIDResponse } from \"../core/types\";\n\nfunction isValidCIDv0(cid: string): boolean {\n\t// CIDv0 is a 46-character base58-encoded string starting with \"Qm\"\n\treturn /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/.test(cid);\n}\n\nfunction isValidCIDv1(cid: string): boolean {\n\t// CIDv1 typically starts with \"b\" and uses base32 encoding\n\treturn /^b[a-z2-7]{58,}$/.test(cid);\n}\n\nfunction isCID(str: string): boolean {\n\t// Remove any leading/trailing whitespace\n\tstr = str.trim();\n\treturn isValidCIDv0(str) || isValidCIDv1(str);\n}\n\nexport async function containsCID(input: string): Promise<ContainsCIDResponse> {\n\tif (typeof input !== \"string\") {\n\t\tthrow new Error(\"Input is not a string\");\n\t}\n\n\t// Helper function to check if a string starts with a CID\n\tconst startsWithCID = (str: string) => {\n\t\tconst parts = str.split(\"/\");\n\t\treturn isCID(parts[0]) ? parts[0] : null;\n\t};\n\n\t// Check if the input itself is a CID or starts with a CID\n\tconst directCID = startsWithCID(input);\n\tif (directCID) {\n\t\treturn {\n\t\t\tcontainsCid: true,\n\t\t\tcid: directCID,\n\t\t};\n\t}\n\n\tlet url: URL;\n\ttry {\n\t\t// Try to parse the input as a URL\n\t\turl = new URL(input);\n\t} catch (error) {\n\t\t// If parsing fails, treat the input as a potential path-like string\n\t\tconst parts = input.split(/\\/|\\?/);\n\t\tfor (const part of parts) {\n\t\t\tconst cid = startsWithCID(part);\n\t\t\tif (cid) {\n\t\t\t\treturn {\n\t\t\t\t\tcontainsCid: true,\n\t\t\t\t\tcid: cid,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tcontainsCid: false,\n\t\t\tcid: null,\n\t\t};\n\t}\n\n\t// Check for CID in subdomain\n\tconst subdomains = url.hostname.split(\".\");\n\tfor (const subdomain of subdomains) {\n\t\tif (isCID(subdomain)) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: subdomain,\n\t\t\t};\n\t\t}\n\t}\n\n\t// Check for CID in path\n\tconst pathParts = url.pathname.split(\"/\");\n\tfor (const part of pathParts) {\n\t\tconst cid = startsWithCID(part);\n\t\tif (cid) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: cid,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tcontainsCid: false,\n\t\tcid: null,\n\t};\n}\n\nexport async function convertToDesiredGateway(\n\tsourceUrl: string,\n\tdesiredGatewayPrefix: string | undefined,\n) {\n\tconst results = await containsCID(sourceUrl);\n\n\tif (results.containsCid !== true) {\n\t\tthrow new Error(\"url does not contain CID\");\n\t}\n\n\tif (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n\t}\n\n\tconst urlObj = new URL(sourceUrl);\n\tconst path = urlObj.pathname + urlObj.search + urlObj.hash;\n\n\t//case 1 - the ipfs://cid path\n\tif (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//case 2 - the /ipfs/cid path (this should cover ipfs://ipfs/cid as well)\n\tif (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 3 - the /ipns/cid path\n\tif (sourceUrl.includes(`/ipns/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 4 - the CID is in the subdomain\n\tif (urlObj.hostname.includes(results.cid!)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//this is the fallback if no supported patterns are provided\n\tthrow new Error(\n\t\t\"unsupported URL pattern, please submit a github issue with the URL utilized\",\n\t);\n}\n", "import { NetworkError } from \"./custom-errors\";\n\nexport function getFileIdFromUrl(url: string): string {\n\tconst match = url.match(/\\/files\\/([^\\/]+)/);\n\tif (match && match[1]) {\n\t\treturn match[1];\n\t}\n\tthrow new NetworkError(\"File ID not found in URL\", 400, {\n\t\terror: \"File ID not found in URL\",\n\t\tcode: \"HTTP_ERROR\",\n\t\tmetadata: {\n\t\t\trequestUrl: url,\n\t\t},\n\t});\n}\n", "import { PinataConfig } from \"../core/types\";\n\nexport const formatConfig = (config: PinataConfig | undefined) => {\n\tlet gateway = config?.pinataGateway;\n\tif (config && gateway) {\n\t\tif (gateway && !gateway.startsWith(\"https://\")) {\n\t\t\tgateway = `https://${gateway}`;\n\t\t}\n\t\tconfig.pinataGateway = gateway;\n\t}\n\treturn config;\n};\n", "import { useState, useCallback, useRef, useEffect } from \"react\";\nimport {\n\tNetworkError,\n\tAuthenticationError,\n\ttype UseUploadReturn,\n\ttype UploadResult,\n\ttype ReactUploadOptions,\n} from \"../types\";\n\nconst LARGE_FILE_THRESHOLD = 94371840; // ~90MB\nconst BASE_CHUNK_SIZE = 262144; // 256KB\nconst DEFAULT_CHUNKS = 20 * 10;\n\nconst normalizeChunkSize = (size: number): number => {\n\tif (size < BASE_CHUNK_SIZE) {\n\t\treturn BASE_CHUNK_SIZE;\n\t}\n\treturn Math.floor(size / BASE_CHUNK_SIZE) * BASE_CHUNK_SIZE;\n};\n\nexport const useUpload = (): UseUploadReturn => {\n\tconst [progress, setProgress] = useState<number>(0);\n\tconst [loading, setLoading] = useState<boolean>(false);\n\tconst [error, setError] = useState<Error | null>(null);\n\tconst [uploadResponse, setUploadResponse] = useState<UploadResult | null>(\n\t\tnull,\n\t);\n\n\t// Refs for pause/resume/cancel\n\tconst uploadUrlRef = useRef<string | null>(null);\n\tconst pausedRef = useRef<boolean>(false);\n\tconst cancelledRef = useRef<boolean>(false);\n\tconst uploadOffsetRef = useRef<number>(0);\n\tconst fileRef = useRef<File | null>(null);\n\tconst headersRef = useRef<Record<string, string>>({});\n\tconst lastResponseHeadersRef = useRef<Headers | null>(null);\n\tconst chunkSizeRef = useRef<number>(BASE_CHUNK_SIZE * DEFAULT_CHUNKS);\n\n\tconst resetState = useCallback(() => {\n\t\tsetProgress(0);\n\t\tsetError(null);\n\t\tsetUploadResponse(null);\n\t\tuploadUrlRef.current = null;\n\t\tpausedRef.current = false;\n\t\tcancelledRef.current = false;\n\t\tuploadOffsetRef.current = 0;\n\t\tfileRef.current = null;\n\t}, []);\n\n\tconst pause = useCallback(() => {\n\t\tpausedRef.current = true;\n\t}, []);\n\n\tconst resume = useCallback(() => {\n\t\tif (pausedRef.current && uploadUrlRef.current && fileRef.current) {\n\t\t\tpausedRef.current = false;\n\t\t\tcontinueChunkedUpload();\n\t\t}\n\t}, []);\n\n\tconst cancel = useCallback(() => {\n\t\tcancelledRef.current = true;\n\t\tsetLoading(false);\n\t}, []);\n\n\t// Handle chunked upload for large files\n\tconst continueChunkedUpload = useCallback(async () => {\n\t\tif (!uploadUrlRef.current || !fileRef.current) return;\n\n\t\ttry {\n\t\t\tif (cancelledRef.current) {\n\t\t\t\tresetState();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pausedRef.current) return;\n\n\t\t\tconst file = fileRef.current;\n\t\t\tconst fileSize = file.size;\n\t\t\tconst offset = uploadOffsetRef.current;\n\t\t\tconst chunkSize = chunkSizeRef.current;\n\n\t\t\tif (offset >= fileSize) {\n\t\t\t\t// Upload is complete\n\t\t\t\tawait finalizeUpload();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst endOffset = Math.min(offset + chunkSize, fileSize);\n\t\t\tconst chunk = file.slice(offset, endOffset);\n\n\t\t\t// Upload chunk\n\t\t\tconst uploadReq = await fetch(uploadUrlRef.current, {\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/offset+octet-stream\",\n\t\t\t\t\t\"Upload-Offset\": offset.toString(),\n\t\t\t\t\t...headersRef.current,\n\t\t\t\t},\n\t\t\t\tbody: chunk,\n\t\t\t});\n\n\t\t\tlastResponseHeadersRef.current = uploadReq.headers;\n\n\t\t\tif (!uploadReq.ok) {\n\t\t\t\tconst errorData = await uploadReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during chunk upload: ${errorData}`,\n\t\t\t\t\tuploadReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: { requestUrl: uploadReq.url },\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Update offset and progress\n\t\t\tconst newOffset = endOffset;\n\t\t\tuploadOffsetRef.current = newOffset;\n\t\t\tconst newProgress = Math.min((newOffset / fileSize) * 100, 99.9);\n\t\t\tsetProgress(newProgress);\n\n\t\t\t// Continue with next chunk\n\t\t\tcontinueChunkedUpload();\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t}, [resetState]);\n\n\t// Finalize upload and get response\n\tconst finalizeUpload = useCallback(async () => {\n\t\tif (!uploadUrlRef.current || !fileRef.current) return;\n\n\t\ttry {\n\t\t\t// Try to get CID from response headers\n\t\t\tlet cid = null;\n\t\t\tif (lastResponseHeadersRef.current) {\n\t\t\t\tcid = lastResponseHeadersRef.current.get(\"upload-cid\");\n\t\t\t}\n\n\t\t\t// If no CID in headers, we may need to fetch file info from the API\n\t\t\t// This would depend on your API's response format\n\n\t\t\tsetUploadResponse(cid);\n\t\t\tsetProgress(100);\n\t\t\tsetLoading(false);\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload finalization\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t}, []);\n\n\t// Direct upload for smaller files\n\tconst simpleUpload = async (\n\t\tfile: File,\n\t\tnetwork: \"public\" | \"private\",\n\t\turl: string,\n\t\toptions?: ReactUploadOptions,\n\t) => {\n\t\ttry {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append(\"file\", file, file.name);\n\t\t\tformData.append(\"network\", network);\n\t\t\tformData.append(\"name\", options?.metadata?.name || file.name);\n\n\t\t\tif (options?.groupId) {\n\t\t\t\tformData.append(\"group_id\", options.groupId);\n\t\t\t}\n\n\t\t\tif (options?.metadata?.keyvalues) {\n\t\t\t\tformData.append(\n\t\t\t\t\t\"keyvalues\",\n\t\t\t\t\tJSON.stringify(options.metadata.keyvalues),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (options?.streamable) {\n\t\t\t\tformData.append(\"streamable\", \"true\");\n\t\t\t}\n\n\t\t\tconst request = await fetch(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headersRef.current,\n\t\t\t\tbody: formData,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: { requestUrl: request.url },\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: { requestUrl: request.url },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tsetUploadResponse(res.data);\n\t\t\tsetProgress(100);\n\t\t\tsetLoading(false);\n\t\t} catch (err) {\n\t\t\tif (err instanceof Error) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetError(new Error(\"Unknown error during upload\"));\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\t// Main upload function\n\tconst upload = useCallback(\n\t\tasync (\n\t\t\tfile: File,\n\t\t\tnetwork: \"public\" | \"private\",\n\t\t\turl: string,\n\t\t\toptions?: ReactUploadOptions,\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tresetState();\n\t\t\t\tsetLoading(true);\n\t\t\t\tfileRef.current = file;\n\n\t\t\t\t// Set up headers\n\t\t\t\tconst headers: Record<string, string> = { Source: \"sdk/react\" };\n\t\t\t\theadersRef.current = headers;\n\n\t\t\t\tif (options?.chunkSize && options.chunkSize > 0) {\n\t\t\t\t\tchunkSizeRef.current = normalizeChunkSize(options.chunkSize);\n\t\t\t\t} else {\n\t\t\t\t\tchunkSizeRef.current = BASE_CHUNK_SIZE * DEFAULT_CHUNKS;\n\t\t\t\t}\n\n\t\t\t\t// For smaller files, use simple upload\n\t\t\t\tif (file.size <= LARGE_FILE_THRESHOLD) {\n\t\t\t\t\tawait simpleUpload(file, network, url, options);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// For larger files, use chunked upload with TUS protocol\n\t\t\t\tlet metadata = `filename ${btoa(file.name)},filetype ${btoa(file.type)},network ${btoa(network)}`;\n\n\t\t\t\tif (options?.groupId) {\n\t\t\t\t\tmetadata += `,group_id ${btoa(options.groupId)}`;\n\t\t\t\t}\n\n\t\t\t\tif (options?.metadata?.keyvalues) {\n\t\t\t\t\tmetadata += `,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n\t\t\t\t}\n\n\t\t\t\tif (options?.streamable) {\n\t\t\t\t\tmetadata += `,streamable ${btoa(\"true\")}`;\n\t\t\t\t}\n\n\t\t\t\t// Initialize TUS upload\n\t\t\t\tconst urlReq = await fetch(url, {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Upload-Length\": `${file.size}`,\n\t\t\t\t\t\t\"Upload-Metadata\": metadata,\n\t\t\t\t\t\t...headers,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (!urlReq.ok) {\n\t\t\t\t\tconst errorData = await urlReq.text();\n\t\t\t\t\tif (urlReq.status === 401 || urlReq.status === 403) {\n\t\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\t\turlReq.status,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new NetworkError(\"Error initializing upload\", urlReq.status, {\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst uploadUrl = urlReq.headers.get(\"Location\");\n\t\t\t\tif (!uploadUrl) {\n\t\t\t\t\tthrow new NetworkError(\"Upload URL not provided\", urlReq.status, {\n\t\t\t\t\t\terror: \"No location header found\",\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tuploadUrlRef.current = uploadUrl;\n\n\t\t\t\t// Start chunked upload\n\t\t\t\tcontinueChunkedUpload();\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Error) {\n\t\t\t\t\tsetError(err);\n\t\t\t\t} else {\n\t\t\t\t\tsetError(new Error(\"Unknown error during upload initialization\"));\n\t\t\t\t}\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t},\n\t\t[resetState, continueChunkedUpload],\n\t);\n\n\t// Cleanup on unmount\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tcancelledRef.current = true;\n\t\t};\n\t}, []);\n\n\treturn {\n\t\tprogress,\n\t\tloading,\n\t\terror,\n\t\tuploadResponse,\n\t\tupload,\n\t\tpause,\n\t\tresume,\n\t\tcancel,\n\t};\n};\n", "import type {\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const analyticsDateInterval = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TimeIntervalAnalyticsQuery,\n): Promise<TimeIntervalAnalyticsResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tdate_interval,\n\t\t\tsort_by,\n\t\t} = options;\n\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (gateway_domain) params.append(\"gateway_domain\", gateway_domain);\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (date_interval) params.append(\"by\", date_interval);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/ipfs/gateway_analytics_time_series?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsDateInterval\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: TimeIntervalAnalyticsResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n", "import type {\n\tTopAnalyticsQuery,\n\tTopAnalyticsItem,\n\tPinataConfig,\n\tTopAnalyticsResponse,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const analyticsTopUsage = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TopAnalyticsQuery,\n): Promise<TopAnalyticsResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tsort_by,\n\t\t\tattribute,\n\t\t} = options;\n\n\t\tconst domain = gateway_domain || config.pinataGateway;\n\t\tif (domain) {\n\t\t\t// Remove 'https://' if present\n\t\t\tconst cleanDomain = domain.replace(/^https?:\\/\\//, \"\");\n\t\t\tparams.append(\"gateway_domain\", cleanDomain);\n\t\t}\n\t\tif (cid) {\n\t\t\tparams.append(\"cid\", cid);\n\t\t}\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (attribute) params.append(\"by\", attribute);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/ipfs/gateway_analytics_top?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsTopUsage\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: TopAnalyticsResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const testAuthentication = async (config: PinataConfig | undefined) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/testAuthentication\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/testAuthentication`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: string = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing authentication: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while testing authentication\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig, DeleteResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const deleteFile = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: string[],\n\tprivacy: \"public\" | \"private\",\n): Promise<DeleteResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst responses: DeleteResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/deleteFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of files) {\n\t\ttry {\n\t\t\tconst response = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error deleting file ${id}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while deleting file ${id}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n", "import type { PinataConfig, VectorizeFileResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteFileVectors = async (\n\tconfig: PinataConfig | undefined,\n\tfileId: string,\n): Promise<VectorizeFileResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorizeFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: VectorizeFileResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n", "import type { SwapCidResponse, PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteSwap = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteSwap\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${network}/swap/${cid}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(`Authentication failed`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized CID Swap Deletion\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"UNAUTHORIZED\",\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID not pinned to account\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"NOT_FOUND\",\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error occurred`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"NETWORK_ERROR\",\n\t\t\t});\n\t\t}\n\n\t\treturn request.statusText;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing deleteSwap: ${error.message}`,\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\tcode: \"DELETE_SWAP_ERROR\",\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while deleting swap\",\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tcode: \"UNKNOWN_ERROR\",\n\t\t\t},\n\t\t);\n\t}\n};\n", "import type {\n\tFileListQuery,\n\tFileListResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listFiles = async (\n\tconfig: PinataConfig | undefined,\n\tprivacy: \"private\" | \"public\",\n\toptions?: FileListQuery,\n): Promise<FileListResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tname,\n\t\t\tgroup,\n\t\t\tcid,\n\t\t\torder,\n\t\t\tlimit,\n\t\t\tmimeType,\n\t\t\tpageToken,\n\t\t\tcidPending,\n\t\t\tmetadata,\n\t\t\tnoGroup,\n\t\t} = options;\n\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (name) params.append(\"name\", name);\n\t\tif (group) params.append(\"group\", group);\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (mimeType) params.append(\"mimeType\", mimeType);\n\t\tif (order) params.append(\"order\", order);\n\t\tif (pageToken) params.append(\"pageToken\", pageToken);\n\t\tif (cidPending) params.append(\"cidPending\", \"true\");\n\t\tif (noGroup) params.append(\"group\", \"null\");\n\t\tif (metadata && typeof metadata === \"object\") {\n\t\t\tObject.entries(metadata).forEach(([key, value]) => {\n\t\t\t\tparams.append(`keyvalues[${key.toString()}]`, value.toString());\n\t\t\t});\n\t\t}\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/files/${privacy}?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\t...config.customHeaders,\n\t\t\t};\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/listFiles\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing list files: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing files\");\n\t}\n};\n", "import type { PinataConfig, UserPinnedDataResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const pinnedFileCount = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinnedFileUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_count;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing pinnedFileUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting pinned file usage\",\n\t\t);\n\t}\n};\n", "import type {\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tPinataConfig,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const swapCid = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapCidOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SwapCidResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tswap_cid: options.swapCid,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapCid\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/swap/${options.cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\"Unauthorized CID Swap\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID not pinned to account\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing CID Swap: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while swapping CID\");\n\t}\n};\n", "import type {\n\tSwapCidResponse,\n\tPinataConfig,\n\tSwapHistoryOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const swapHistory = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapHistoryOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SwapCidResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapHistory\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/swap/${options.cid}?domain=${options.domain}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID does not have history\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse[] = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error fetching swap history: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching swap history\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig, UserPinnedDataResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const totalStorageUsage = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/totalStorageUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_size_total;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing totalStorageUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting total storage usage\",\n\t\t);\n\t}\n};\n", "import type {\n\tFileListItem,\n\tPinataConfig,\n\tUpdateFileOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const updateFile = async (\n\tconfig: PinataConfig | undefined,\n\toptions: UpdateFileOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<FileListItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tif (\n\t\t!options.name &&\n\t\t(!options.keyvalues || Object.keys(options.keyvalues).length === 0)\n\t) {\n\t\tthrow new ValidationError(\n\t\t\t\"At least one of 'name' or 'keyvalues' must be provided\",\n\t\t);\n\t}\n\n\tconst data: Record<string, any> = {};\n\n\tif (options.name !== undefined) {\n\t\tdata.name = options.name;\n\t}\n\tif (options.keyvalues && Object.keys(options.keyvalues).length > 0) {\n\t\tdata.keyvalues = options.keyvalues;\n\t}\n\n\tconst body = JSON.stringify(data);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateMetadata\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${privacy}/${options.id}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: body,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing updateFile: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating file\");\n\t}\n};\n", "import type { PinataConfig, VectorizeFileResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const vectorizeFile = async (\n\tconfig: PinataConfig | undefined,\n\tfileId: string,\n): Promise<VectorizeFileResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorizeFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: VectorizeFileResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n", "import type {\n\tGetCIDResponse,\n\tPinataConfig,\n\tVectorizeQuery,\n\tVectorizeQueryResponse,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nimport { getCid } from \"../../functions\";\n\nexport const vectorizeQuery = async (\n\tconfig: PinataConfig | undefined,\n\toptions: VectorizeQuery,\n): Promise<VectorizeQueryResponse | GetCIDResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorQuery\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tconst body = JSON.stringify({\n\t\ttext: options.query,\n\t});\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/vectorize/groups/${options.groupId}/query`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: body,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: VectorizeQueryResponse = res.data;\n\n\t\tif (options.returnFile) {\n\t\t\tif (resData.matches.length === 0) {\n\t\t\t\tthrow new PinataError(`No files returned in query to fetch`);\n\t\t\t}\n\t\t\tconst cid = resData.matches[0].cid;\n\t\t\tconst fileRes: GetCIDResponse = await getCid(config, cid, \"files\");\n\t\t\treturn fileRes;\n\t\t}\n\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n", "import type {\n\tPinQueueItem,\n\tPinQueueQuery,\n\tPinQueueResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const queue = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: PinQueueQuery,\n): Promise<PinQueueResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams({\n\t\tincludesCount: \"false\",\n\t});\n\n\tif (options) {\n\t\tconst { cid, status, sort, limit, pageToken } = options;\n\n\t\tif (cid) params.append(\"cid\", cid.toString());\n\t\tif (status) params.append(\"status\", status.toString());\n\t\tif (sort) params.append(\"sort\", sort.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (pageToken) params.append(\"pageToken\", pageToken.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/files/public/pin_by_cid?${params.toString()}`;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinJobs\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res = await request.json();\n\t\tconst resData: PinQueueResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing pinJobs: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing pin jobs\");\n\t}\n};\n", "import type { PinataConfig } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deletePinRequest = async (\n\tconfig: PinataConfig | undefined,\n\tid: string,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/deletePinRequest\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst response = await fetch(`${endpoint}/files/public/pin_by_cid/${id}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = await response.text();\n\t\t\tif (response.status === 401) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\tresponse.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error`, response.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\treturn \"OK\";\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error deleting pin by request: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while deleting pin by CID request\",\n\t\t);\n\t}\n};\n", "import type {\n\tGetCIDResponse,\n\tPinataConfig,\n\tOptimizeImageOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tgatewayType?: \"ipfs\" | \"files\",\n\toptions?: OptimizeImageOptions,\n): Promise<GetCIDResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet data: JSON | string | Blob;\n\tlet newUrl: string = `${config?.pinataGateway}/${gatewayType}/${cid}`;\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tif (options.width) params.append(\"img-width\", options.width.toString());\n\t\tif (options.height) params.append(\"img-height\", options.height.toString());\n\t\tif (options.dpr) params.append(\"img-dpr\", options.dpr.toString());\n\t\tif (options.fit) params.append(\"img-fit\", options.fit);\n\t\tif (options.gravity) params.append(\"img-gravity\", options.gravity);\n\t\tif (options.quality)\n\t\t\tparams.append(\"img-quality\", options.quality.toString());\n\t\tif (options.format) params.append(\"img-format\", options.format);\n\t\tif (options.animation !== undefined)\n\t\t\tparams.append(\"img-anim\", options.animation.toString());\n\t\tif (options.sharpen)\n\t\t\tparams.append(\"img-sharpen\", options.sharpen.toString());\n\t\tif (options.onError === true) params.append(\"img-onerror\", \"redirect\");\n\t\tif (options.metadata) params.append(\"img-metadata\", options.metadata);\n\t}\n\n\tif (config?.pinataGatewayKey) {\n\t\tparams.append(\"pinataGatewayToken\", config.pinataGatewayKey);\n\t}\n\n\tconst queryString = params.toString();\n\tif (queryString) {\n\t\tnewUrl += `?${queryString}`;\n\t}\n\n\tif (gatewayType === \"ipfs\") {\n\t\tconst request = await fetch(newUrl);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst contentType: string | null =\n\t\t\trequest.headers.get(\"content-type\")?.split(\";\")[0] || null;\n\n\t\tif (contentType?.includes(\"application/json\")) {\n\t\t\tdata = await request.json();\n\t\t} else if (contentType?.includes(\"text/\")) {\n\t\t\tdata = await request.text();\n\t\t} else {\n\t\t\tdata = await request.blob();\n\t\t}\n\n\t\tconst res: GetCIDResponse = {\n\t\t\tdata: data,\n\t\t\tcontentType: contentType,\n\t\t};\n\n\t\treturn res;\n\t}\n\n\tconst date = Math.floor(new Date().getTime() / 1000);\n\n\tconst payload = JSON.stringify({\n\t\turl: newUrl,\n\t\tdate: date,\n\t\texpires: 30,\n\t\tmethod: \"GET\",\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/getCid\",\n\t\t};\n\t}\n\n\tconst signedUrlRequest = await fetch(`${endpoint}/files/sign`, {\n\t\tmethod: \"POST\",\n\t\theaders: headers,\n\t\tbody: payload,\n\t});\n\n\tconst signedUrl = await signedUrlRequest.json();\n\n\ttry {\n\t\tconst request = await fetch(signedUrl.data);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst contentType: string | null =\n\t\t\trequest.headers.get(\"content-type\")?.split(\";\")[0] || null;\n\n\t\tif (contentType?.includes(\"application/json\")) {\n\t\t\tdata = await request.json();\n\t\t} else if (contentType?.includes(\"text/\")) {\n\t\t\tdata = await request.text();\n\t\t} else {\n\t\t\tdata = await request.blob();\n\t\t}\n\n\t\tconst res: GetCIDResponse = {\n\t\t\tdata: data,\n\t\t\tcontentType: contentType,\n\t\t};\n\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getCid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting CID contents\",\n\t\t);\n\t}\n};\n", "import { convertToDesiredGateway } from \"../../../utils/gateway-tools\";\nimport type { PinataConfig } from \"../../types\";\n\nexport const convertIPFSUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\tgatewayPrefix?: string,\n): Promise<string> => {\n\tlet newUrl: string;\n\tlet prefix: string =\n\t\tgatewayPrefix || config?.pinataGateway || \"https://gateway.pinata.cloud\";\n\tnewUrl = await convertToDesiredGateway(url, prefix);\n\tif (config?.pinataGatewayKey) {\n\t\t`${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n\t}\n\treturn newUrl;\n};\n", "import type {\n\tPinataConfig,\n\tOptimizeImageOptions,\n\tAccessLinkOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createAccessLink = async (\n\tconfig: PinataConfig | undefined,\n\toptions: AccessLinkOptions,\n\timgOpts: OptimizeImageOptions,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet baseUrl: string | undefined;\n\n\tif (options?.gateway) {\n\t\tbaseUrl = options.gateway.startsWith(\"https://\")\n\t\t\t? options.gateway\n\t\t\t: `https://${options.gateway}`;\n\t} else {\n\t\tbaseUrl = config.pinataGateway;\n\t}\n\n\tlet newUrl: string = `${baseUrl}/files/${options.cid}`;\n\n\tconst params = new URLSearchParams();\n\n\tif (imgOpts) {\n\t\tif (imgOpts.width) params.append(\"img-width\", imgOpts.width.toString());\n\t\tif (imgOpts.height) params.append(\"img-height\", imgOpts.height.toString());\n\t\tif (imgOpts.dpr) params.append(\"img-dpr\", imgOpts.dpr.toString());\n\t\tif (imgOpts.fit) params.append(\"img-fit\", imgOpts.fit);\n\t\tif (imgOpts.gravity) params.append(\"img-gravity\", imgOpts.gravity);\n\t\tif (imgOpts.quality)\n\t\t\tparams.append(\"img-quality\", imgOpts.quality.toString());\n\t\tif (imgOpts.format) params.append(\"img-format\", imgOpts.format);\n\t\tif (imgOpts.animation !== undefined)\n\t\t\tparams.append(\"img-anim\", imgOpts.animation.toString());\n\t\tif (imgOpts.sharpen)\n\t\t\tparams.append(\"img-sharpen\", imgOpts.sharpen.toString());\n\t\tif (imgOpts.onError === true) params.append(\"img-onerror\", \"redirect\");\n\t\tif (imgOpts.metadata) params.append(\"img-metadata\", imgOpts.metadata);\n\t}\n\n\tconst queryString = params.toString();\n\n\tif (queryString) {\n\t\tnewUrl += `?${queryString}`;\n\t}\n\n\tconst date = options?.date || Math.floor(new Date().getTime() / 1000);\n\n\tconst payload = JSON.stringify({\n\t\turl: newUrl,\n\t\tdate: date,\n\t\texpires: options.expires,\n\t\tmethod: \"GET\",\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/createSignURL\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/private/download_link`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: payload,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing createSignedURL: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while getting signed url\");\n\t}\n};\n", "import type {\n\tGroupCIDOptions,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const addToGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<UpdateGroupFilesResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst wait = (milliseconds: number): Promise<void> => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, milliseconds);\n\t\t});\n\t};\n\n\tconst responses: UpdateGroupFilesResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addToGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of options.files) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"PUT\",\n\t\t\t\t\theaders: headers,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error adding file ${id} to group: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while adding file ${id} to group`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n", "import type {\n\tPinataConfig,\n\tGroupOptions,\n\tGroupResponseItem,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tname: options.name,\n\t\tis_public: options.isPublic,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${privacy}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating a group\");\n\t}\n};\n", "import type { GetGroupOptions, PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: string = request.statusText;\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing deleteGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while deleting a group\");\n\t}\n};\n", "import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGetGroupOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting info for a group\",\n\t\t);\n\t}\n};\n", "import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGroupQueryOptions,\n\tGroupListResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listGroups = async (\n\tconfig: PinataConfig | undefined,\n\tprivacy: \"public\" | \"private\",\n\toptions?: GroupQueryOptions,\n): Promise<GroupListResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listGroups\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { pageToken, name, limit, isPublic } = options;\n\n\t\tif (pageToken) params.append(\"pageToken\", pageToken.toString());\n\t\tif (isPublic) params.append(\"isPublic\", isPublic.toString());\n\t\tif (name) params.append(\"name\", name);\n\t\tif (limit !== undefined) params.append(\"limit\", limit.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}?${params.toString()}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupListResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listGroups: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing groups\");\n\t}\n};\n", "import type {\n\tGroupCIDOptions,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const removeFromGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<UpdateGroupFilesResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst wait = (milliseconds: number): Promise<void> => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, milliseconds);\n\t\t});\n\t};\n\n\tconst responses: UpdateGroupFilesResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addToGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of options.files) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"DELETE\",\n\t\t\t\t\theaders: headers,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error adding file ${id} to group: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while adding file ${id} to group`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n", "import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tUpdateGroupOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const updateGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: UpdateGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tname: options.name,\n\t\tis_public: options.isPublic,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing updateGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating group\");\n\t}\n};\n", "import type { PinataConfig, KeyOptions, KeyResponse } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createKey = async (\n\tconfig: PinataConfig | undefined,\n\toptions: KeyOptions,\n): Promise<KeyResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createKey\",\n\t\t};\n\t}\n\n\tconst data = JSON.stringify(options);\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinata/keys`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: KeyResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createKey: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating API key\");\n\t}\n};\n", "import type {\n\tKeyListItem,\n\tKeyListQuery,\n\tKeyListResponse,\n\tPinataConfig,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listKeys = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: KeyListQuery,\n): Promise<KeyListItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listKeys\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { offset, name, revoked, limitedUse, exhausted } = options;\n\n\t\tif (offset) params.append(\"offset\", offset.toString());\n\t\tif (revoked !== undefined) params.append(\"revoked\", revoked.toString());\n\t\tif (limitedUse !== undefined)\n\t\t\tparams.append(\"limitedUse\", limitedUse.toString());\n\t\tif (exhausted !== undefined)\n\t\t\tparams.append(\"exhausted\", exhausted.toString());\n\t\tif (name) params.append(\"name\", name);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/pinata/keys?${params.toString()}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: KeyListResponse = await request.json();\n\t\treturn res.keys;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listKeys: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing API keys\");\n\t}\n};\n", "import type { PinataConfig, RevokeKeyResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const revokeKeys = async (\n\tconfig: PinataConfig | undefined,\n\tkeys: string[],\n): Promise<RevokeKeyResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/revokeKeys\",\n\t\t};\n\t}\n\n\tconst responses: RevokeKeyResponse[] = [];\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const key of keys) {\n\t\ttry {\n\t\t\tconst request = await fetch(`${endpoint}/pinata/keys/${key}`, {\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst result: string = await request.json();\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: result,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error revoking key ${key}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while revoking key ${key}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn responses;\n};\n", "import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadBase64 = async (\n\tconfig: PinataConfig | undefined,\n\tbase64String: string,\n\tnetwork: \"private\" | \"public\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst name = options?.metadata?.name\n\t\t? options?.metadata?.name\n\t\t: \"base64 string\";\n\n\tconst buffer = Buffer.from(base64String, \"base64\");\n\n\tconst blob = new Blob([buffer]);\n\n\tconst data = new FormData();\n\n\tdata.append(\"file\", blob, name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", name);\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/base64\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig, SignedUploadUrlOptions } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createSignedUploadURL = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SignedUploadUrlOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\ttype PayloadData = {\n\t\tdate: number;\n\t\texpires: number;\n\t\tgroup_id?: string;\n\t\tfilename?: string;\n\t\tkeyvalues?: Record<string, string>;\n\t\tnetwork?: \"public\" | \"private\";\n\t\tmax_file_size?: number;\n\t\tallow_mime_types?: string[];\n\t\tstreamable?: boolean;\n\t};\n\n\tconst date = options?.date || Math.floor(new Date().getTime() / 1000);\n\n\tconst payload: PayloadData = {\n\t\tdate: date,\n\t\texpires: options.expires,\n\t};\n\n\tif (options.groupId) {\n\t\tpayload.group_id = options.groupId;\n\t}\n\n\tif (options.name) {\n\t\tpayload.filename = options.name;\n\t}\n\n\tif (options.keyvalues) {\n\t\tpayload.keyvalues = options.keyvalues;\n\t}\n\n\tif (network) {\n\t\tpayload.network = network;\n\t}\n\n\tif (options.streamable) {\n\t\tpayload.streamable = options.streamable;\n\t}\n\n\tif (options.maxFileSize) {\n\t\tpayload.max_file_size = options.maxFileSize;\n\t}\n\n\tif (options.mimeTypes) {\n\t\tpayload.allow_mime_types = options.mimeTypes;\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/createSignURL\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/sign`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tcache: \"no-store\",\n\t\t\tbody: JSON.stringify(payload),\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing createSignedURL: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while getting signed url\");\n\t}\n};\n", "import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\nimport { getFileIdFromUrl } from \"../../../utils/resumable\";\n\nexport const uploadFile = async (\n\tconfig: PinataConfig | undefined,\n\tfile: File,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config.pinataJwt;\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (file.size > 94371840) {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t...config.customHeaders,\n\t\t\t};\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\tSource: \"sdk/file\",\n\t\t\t};\n\t\t}\n\n\t\tconst name = options?.metadata?.name || file.name || \"File from SDK\";\n\n\t\tlet metadata: string = `filename ${btoa(name)},filetype ${btoa(file.type)},network ${btoa(network)}`;\n\n\t\tif (options?.groupId) {\n\t\t\tmetadata + `,group_id ${btoa(options.groupId)}`;\n\t\t}\n\n\t\tif (options?.metadata?.keyvalues) {\n\t\t\tmetadata +\n\t\t\t\t`,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n\t\t}\n\n\t\tif (options?.streamable) {\n\t\t\tmetadata + `,keyvalues ${btoa(\"true\")}`;\n\t\t}\n\n\t\tlet updatedEndpoint: string = `${endpoint}/files`;\n\n\t\tif (options?.url) {\n\t\t\tupdatedEndpoint = options.url;\n\t\t}\n\n\t\tconst urlReq = await fetch(updatedEndpoint, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Upload-Length\": `${file.size}`,\n\t\t\t\t\"Upload-Metadata\": metadata,\n\t\t\t\t...headers,\n\t\t\t},\n\t\t});\n\t\tconst url = urlReq.headers.get(\"Location\");\n\t\tif (!url) {\n\t\t\tconst errorData = await urlReq.text();\n\t\t\tthrow new NetworkError(\"Upload URL not provided\", urlReq.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: urlReq.url,\n\t\t\t\t\trequestHeaders: urlReq.headers,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst chunkSize = 50 * 1024 * 1024; // 50MB in bytes\n\t\tconst totalChunks = Math.ceil(file.size / chunkSize);\n\t\tlet offset = 0;\n\t\tlet uploadReq: any;\n\n\t\tfor (let i = 0; i < totalChunks; i++) {\n\t\t\tconst chunk = file.slice(offset, offset + chunkSize);\n\t\t\tuploadReq = await fetch(url as string, {\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/offset+octet-stream\",\n\t\t\t\t\t\"Upload-Offset\": offset.toString(),\n\t\t\t\t\t...headers,\n\t\t\t\t},\n\t\t\t\tbody: chunk,\n\t\t\t});\n\n\t\t\tif (!uploadReq.ok) {\n\t\t\t\tconst errorData = await uploadReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during chunk upload: ${errorData}`,\n\t\t\t\t\tuploadReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: uploadReq.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toffset += chunk.size;\n\t\t}\n\n\t\tif (uploadReq.status === 204) {\n\t\t\tconst fileId = getFileIdFromUrl(url);\n\t\t\tlet dataEndpoint: string;\n\t\t\tif (config.endpointUrl) {\n\t\t\t\tdataEndpoint = config.endpointUrl;\n\t\t\t} else {\n\t\t\t\tdataEndpoint = \"https://api.pinata.cloud/v3\";\n\t\t\t}\n\t\t\tconst fileInfoReq = await fetch(\n\t\t\t\t`${dataEndpoint}/files/${network}/${fileId}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst fileInfo = await fileInfoReq.json();\n\t\t\tconst data: UploadResponse = fileInfo.data;\n\t\t\tif (options?.vectorize) {\n\t\t\t\tconst vectorReq = await fetch(\n\t\t\t\t\t`${endpoint}/vectorize/files/${data.id}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tif (vectorReq.ok) {\n\t\t\t\t\tdata.vectorized = true;\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: vectorReq.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/file\",\n\t\t};\n\t}\n\n\tconst data = new FormData();\n\tdata.append(\"file\", file, file.name);\n\n\tdata.append(\"network\", network);\n\n\tdata.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tif (options?.streamable) {\n\t\tdata.append(\"streamable\", \"true\");\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error uploading file: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading the file\");\n\t}\n};\n", "import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadFileArray = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: File[],\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst folder = options?.metadata?.name || \"folder_from_sdk\";\n\n\tconst data = new FormData();\n\n\tfor (const file of Array.from(files)) {\n\t\tconst path = file.webkitRelativePath || `${folder}/${file.name}`;\n\t\tdata.append(\"file\", file, path);\n\t}\n\n\t// Reserved for later release\n\t// data.append(\"name\", folder);\n\n\t// data.append(\"network\", network);\n\n\t// if (options?.groupId) {\n\t//   data.append(\"group_id\", options.groupId);\n\t// }\n\n\t// if (options?.metadata?.keyvalues) {\n\t//   data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t// }\n\n\t// Legacy\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: folder,\n\t\t\tkeyvalues: options?.metadata?.keyvalues,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tgroupId: options?.groupId,\n\t\t\tcidVersion: 1,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/fileArray\",\n\t\t};\n\t}\n\t// Reserved for later release\n\t//let endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\tlet endpoint: string = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n\n\tif (config.legacyUploadUrl) {\n\t\tendpoint = config.legacyUploadUrl;\n\t}\n\n\ttry {\n\t\t// Reserved for later release\n\t\t// const request = await fetch(`${endpoint}/files`, {\n\t\t// \tmethod: \"POST\",\n\t\t// \theaders: headers,\n\t\t// \tbody: data,\n\t\t// });\n\t\tconst request = await fetch(`${endpoint}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\n\t\tconst resData: UploadResponse = {\n\t\t\tid: res.ID,\n\t\t\tname: res.Name,\n\t\t\tcid: res.IpfsHash,\n\t\t\tsize: res.PinSize,\n\t\t\tcreated_at: res.Timestamp,\n\t\t\tnumber_of_files: res.NumberOfFiles,\n\t\t\tmime_type: res.MimeType,\n\t\t\tgroup_id: res.GroupId,\n\t\t\tkeyvalues: res.Keyvalues,\n\t\t\tvectorized: false,\n\t\t\tnetwork: \"public\",\n\t\t};\n\n\t\t// if (options?.vectorize) {\n\t\t//   const vectorReq = await fetch(\n\t\t//     `${endpoint}/vectorize/files/${resData.id}`,\n\t\t//     {\n\t\t//       method: \"POST\",\n\t\t//       headers: {\n\t\t//         Authorization: `Bearer ${jwt}`,\n\t\t//       },\n\t\t//     },\n\t\t//   );\n\t\t//   if (vectorReq.ok) {\n\t\t//     resData.vectorized = true;\n\t\t//     return resData;\n\t\t//   } else {\n\t\t//     const errorData = await vectorReq.text();\n\t\t//     throw new NetworkError(\n\t\t//       `HTTP error during vectorization: ${errorData}`,\n\t\t//       vectorReq.status,\n\t\t//       {\n\t\t//         error: errorData,\n\t\t//         code: \"HTTP_ERROR\",\n\t\t//         metadata: {\n\t\t//           requestUrl: request.url,\n\t\t//         },\n\t\t//       },\n\t\t//     );\n\t\t//   }\n\t\t// }\n\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing fileArray: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while uploading an array of files\",\n\t\t);\n\t}\n};\n", "import type {\n\tPinataConfig,\n\tUploadResponse,\n\tUploadOptions,\n\tJsonBody,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadJson = async <T extends JsonBody>(\n\tconfig: PinataConfig | undefined,\n\tjsonData: T,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst json = JSON.stringify(jsonData);\n\tconst blob = new Blob([json]);\n\tconst file = new File([blob], \"data.json\", { type: \"application/json\" });\n\n\tconst data = new FormData();\n\tdata.append(\"file\", file, file.name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/json\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing json: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading json\");\n\t}\n};\n", "import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\tconst data = new FormData();\n\n\tconst stream = await fetch(url);\n\n\tif (!stream.ok) {\n\t\tconst errorData = await stream.text();\n\t\tthrow new NetworkError(`HTTP error: ${errorData}`, stream.status, {\n\t\t\terror: errorData,\n\t\t\tcode: \"HTTP_ERROR\",\n\t\t\tmetadata: {\n\t\t\t\trequestUrl: stream.url,\n\t\t\t},\n\t\t});\n\t}\n\n\tconst arrayBuffer = await stream.arrayBuffer();\n\n\tconst blob = new Blob([arrayBuffer]);\n\n\tconst name = options?.metadata?.name ?? \"url_upload\";\n\n\tconst file = new File([blob], name);\n\n\tdata.append(\"file\", file, name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", name);\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/url\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing url: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading by url\");\n\t}\n};\n", "import type {\n\tPinataConfig,\n\tPinByCIDResponse,\n\tUploadCIDOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\toptions?: UploadCIDOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/cid\",\n\t\t};\n\t}\n\n\tconst requestBody: Record<string, any> = {\n\t\tcid: cid,\n\t\tname: options?.metadata ? options?.metadata?.name : cid,\n\t\tkeyvalues: options?.metadata?.keyvalues,\n\t\tgroup_id: options?.groupId,\n\t\thost_nodes: options?.peerAddresses,\n\t};\n\n\tconst data = JSON.stringify(requestBody);\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/public/pin_by_cid`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: PinByCIDResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing cid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while pinning by CID\");\n\t}\n};\n", "import type { PinataConfig } from \"../../types/\";\nimport {\n\tAnalyticsRequests,\n\tAnalyticsBandwidth,\n\tTimeIntervalAnalyticsBuilder,\n} from \"./\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nexport class Analytics {\n\tconfig: PinataConfig | undefined;\n\trequests: AnalyticsRequests;\n\tbandwidth: AnalyticsBandwidth;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.requests = new AnalyticsRequests(this.config);\n\t\tthis.bandwidth = new AnalyticsBandwidth(this.config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t\tthis.requests.updateConfig(newConfig);\n\t\tthis.bandwidth.updateConfig(newConfig);\n\t}\n\n\tsummary(options: {\n\t\tdomain: string;\n\t\tstart: string;\n\t\tend: string;\n\t\tinterval: \"day\" | \"week\";\n\t}): TimeIntervalAnalyticsBuilder {\n\t\treturn new TimeIntervalAnalyticsBuilder(\n\t\t\tthis.config,\n\t\t\toptions.domain,\n\t\t\toptions.start,\n\t\t\toptions.end,\n\t\t\toptions.interval,\n\t\t);\n\t}\n}\n", "export const calculateDates = (\n\tdays: number,\n): { start: string; end: string } => {\n\tconst end = new Date();\n\tconst start = new Date();\n\tstart.setDate(start.getDate() - days);\n\n\t// Format dates to ISO string and trim time portion\n\treturn {\n\t\tstart: start.toISOString().split(\"T\")[0],\n\t\tend: end.toISOString().split(\"T\")[0],\n\t};\n};\n", "import {\n\tPinataConfig,\n\tTopAnalyticsQuery,\n\tTopAnalyticsResponse,\n} from \"../../types\";\nimport { analyticsTopUsage } from \"../../functions\";\nimport { calculateDates } from \"./utils\";\n\nexport class AnalyticsFilter {\n\tprotected config: PinataConfig | undefined;\n\tprotected query: TopAnalyticsQuery;\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t) {\n\t\tthis.config = config;\n\t\tthis.query = {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tsort_by: \"requests\", // Will be overridden in child classes\n\t\t\tattribute: \"cid\",\n\t\t};\n\t}\n\n\tcid(cid?: string): this {\n\t\tthis.query.attribute = \"cid\";\n\t\tif (cid) {\n\t\t\tthis.query.cid = cid;\n\t\t}\n\t\treturn this;\n\t}\n\n\tfileName(fileName?: string): this {\n\t\tthis.query.attribute = \"file_name\";\n\t\tif (fileName) {\n\t\t\tthis.query.file_name = fileName;\n\t\t}\n\t\treturn this;\n\t}\n\n\tuserAgent(userAgent?: string): this {\n\t\tthis.query.attribute = \"user_agent\";\n\t\tif (userAgent) {\n\t\t\tthis.query.user_agent = userAgent;\n\t\t}\n\t\treturn this;\n\t}\n\n\tcountry(country?: string): this {\n\t\tthis.query.attribute = \"country\";\n\t\tif (country) {\n\t\t\tthis.query.country = country;\n\t\t}\n\t\treturn this;\n\t}\n\n\tregion(region?: string): this {\n\t\tthis.query.attribute = \"region\";\n\t\tif (region) {\n\t\t\tthis.query.region = region;\n\t\t}\n\t\treturn this;\n\t}\n\n\treferer(referer?: string): this {\n\t\tthis.query.attribute = \"referer\";\n\t\tif (referer) {\n\t\t\tthis.query.referer = referer;\n\t\t}\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): this {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tsort(order: \"asc\" | \"desc\"): this {\n\t\tthis.query.sort_order = order;\n\t\treturn this;\n\t}\n\n\tdays(numberOfDays: number): this {\n\t\tconst { start, end } = calculateDates(numberOfDays);\n\t\tthis.query.start_date = start;\n\t\tthis.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: TopAnalyticsResponse) => any) | null,\n\t): Promise<any> {\n\t\treturn analyticsTopUsage(this.config, this.query).then(onfulfilled);\n\t}\n}\n", "import type { PinataConfig } from \"../../types\";\nimport { AnalyticsFilter } from \"./AnalyticsFilter\";\n\nexport class AnalyticsBandwidth extends AnalyticsFilter {\n\tconstructor(config?: PinataConfig) {\n\t\tsuper(config, \"\", \"\", \"\"); // These will need to be set through methods\n\t\tthis.query.sort_by = \"bandwidth\";\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcustomDates(start?: string, end?: string): this {\n\t\tif (start) this.query.start_date = start;\n\t\tif (end) this.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tfrom(domain: string): this {\n\t\tthis.query.gateway_domain = domain;\n\t\treturn this;\n\t}\n}\n", "import type { AnalyticsQuery, PinataConfig } from \"../../types\";\n\nexport class AnalyticsBuilder<T extends AnalyticsQuery, R> {\n\tprotected config: PinataConfig | undefined;\n\tprotected query: T;\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined, query: T) {\n\t\tthis.config = config;\n\t\tthis.query = query;\n\t}\n\n\tcid(cid: string): this {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tfileName(fileName: string): this {\n\t\tthis.query.file_name = fileName;\n\t\treturn this;\n\t}\n\n\tuserAgent(userAgent: string): this {\n\t\tthis.query.user_agent = userAgent;\n\t\treturn this;\n\t}\n\n\tcountry(country: string): this {\n\t\tthis.query.country = country;\n\t\treturn this;\n\t}\n\n\tregion(region: string): this {\n\t\tthis.query.region = region;\n\t\treturn this;\n\t}\n\n\treferer(referer: string): this {\n\t\tthis.query.referer = referer;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): this {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tsort(order: \"asc\" | \"desc\"): this {\n\t\tthis.query.sort_order = order;\n\t\treturn this;\n\t}\n\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tprotected async getAnalytics(): Promise<R> {\n\t\t//await this.rateLimit();\n\t\tthrow new Error(\"getAnalytics method must be implemented in derived class\");\n\t}\n\n\tthen(onfulfilled?: ((value: R) => any) | null): Promise<any> {\n\t\treturn this.getAnalytics().then(onfulfilled);\n\t}\n}\n", "import { PinataConfig } from \"../../types\";\nimport { AnalyticsFilter } from \"./AnalyticsFilter\";\n\nexport class AnalyticsRequests extends AnalyticsFilter {\n\tconstructor(config?: PinataConfig) {\n\t\tsuper(config, \"\", \"\", \"\"); // These will need to be set through methods\n\t\tthis.query.sort_by = \"requests\";\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcustomDates(start?: string, end?: string): this {\n\t\tif (start) this.query.start_date = start;\n\t\tif (end) this.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tfrom(domain: string): this {\n\t\tthis.query.gateway_domain = domain;\n\t\treturn this;\n\t}\n}\n", "import { AnalyticsBuilder } from \"./AnalyticsBuilder\";\nimport {\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport { analyticsDateInterval } from \"../../functions\";\n\nexport class TimeIntervalAnalyticsBuilder extends AnalyticsBuilder<\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse\n> {\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t\tdateInterval: \"day\" | \"week\",\n\t) {\n\t\tsuper(config, {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tdate_interval: dateInterval,\n\t\t});\n\t}\n\n\tsortBy(sortBy: \"requests\" | \"bandwidth\"): this {\n\t\tthis.query.sort_by = sortBy;\n\t\treturn this;\n\t}\n\n\tprotected async getAnalytics(): Promise<TimeIntervalAnalyticsResponse> {\n\t\treturn analyticsDateInterval(this.config, this.query);\n\t}\n\n\tasync all(): Promise<TimeIntervalAnalyticsResponse> {\n\t\treturn this.getAnalytics();\n\t}\n}\n", "import type {\n\tPinataConfig,\n\tGroupQueryOptions,\n\tGroupListResponse,\n\tGroupResponseItem,\n} from \"../../types\";\nimport { listGroups } from \"../../functions\";\n\nexport class FilterGroups {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: GroupQueryOptions = {};\n\tprivate privacy: \"private\" | \"public\";\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\tprivate nextPageToken: string | undefined;\n\n\tconstructor(config: PinataConfig | undefined, privacy: \"private\" | \"public\") {\n\t\tthis.config = config;\n\t\tthis.privacy = privacy;\n\t}\n\n\tname(name: string): FilterGroups {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): FilterGroups {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tisPublic(isPublic: boolean): FilterGroups {\n\t\tthis.query.isPublic = isPublic;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterGroups {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: GroupListResponse) => any) | null,\n\t): Promise<GroupListResponse> {\n\t\treturn this.fetchPage()\n\t\t\t.then((response) => {\n\t\t\t\tthis.nextPageToken = response.next_page_token;\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.then(onfulfilled);\n\t}\n\n\tprivate async fetchPage(): Promise<GroupListResponse> {\n\t\tif (this.nextPageToken) {\n\t\t\tthis.query.pageToken = this.nextPageToken;\n\t\t}\n\t\treturn listGroups(this.config, this.privacy, this.query);\n\t}\n\n\t// rate limit, hopefully temporary?\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<\n\t\tGroupResponseItem,\n\t\tvoid,\n\t\tunknown\n\t> {\n\t\twhile (true) {\n\t\t\tconst response = await this.fetchPage();\n\t\t\tfor (const item of response.groups) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!response.next_page_token) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.nextPageToken = response.next_page_token;\n\t\t}\n\t}\n\n\tasync all(): Promise<GroupResponseItem[]> {\n\t\tconst allItems: GroupResponseItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddToGroup,\n\tcreateGroup,\n\tdeleteGroup,\n\tgetGroup,\n\tremoveFromGroup,\n\tupdateGroup,\n} from \"../../functions\";\nimport {\n\tGetGroupOptions,\n\tGroupCIDOptions,\n\tGroupOptions,\n\tGroupResponseItem,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n\tUpdateGroupOptions,\n} from \"../../types\";\nimport { FilterGroups } from \"./GroupsFilter\";\n\nexport class PublicGroups {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: GroupOptions): Promise<GroupResponseItem> {\n\t\treturn createGroup(this.config, options, \"public\");\n\t}\n\n\tlist(): FilterGroups {\n\t\treturn new FilterGroups(this.config, \"public\");\n\t}\n\n\tget(options: GetGroupOptions): Promise<GroupResponseItem> {\n\t\treturn getGroup(this.config, options, \"public\");\n\t}\n\n\taddFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn addToGroup(this.config, options, \"public\");\n\t}\n\n\tremoveFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn removeFromGroup(this.config, options, \"public\");\n\t}\n\n\tupdate(options: UpdateGroupOptions): Promise<GroupResponseItem> {\n\t\treturn updateGroup(this.config, options, \"public\");\n\t}\n\n\tdelete(options: GetGroupOptions): Promise<string> {\n\t\treturn deleteGroup(this.config, options, \"public\");\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddToGroup,\n\tcreateGroup,\n\tdeleteGroup,\n\tgetGroup,\n\tremoveFromGroup,\n\tupdateGroup,\n} from \"../../functions\";\nimport {\n\tGetGroupOptions,\n\tGroupCIDOptions,\n\tGroupOptions,\n\tGroupResponseItem,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n\tUpdateGroupOptions,\n} from \"../../types\";\nimport { FilterGroups } from \"./GroupsFilter\";\n\nexport class PrivateGroups {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: GroupOptions): Promise<GroupResponseItem> {\n\t\treturn createGroup(this.config, options, \"private\");\n\t}\n\n\tlist(): FilterGroups {\n\t\treturn new FilterGroups(this.config, \"private\");\n\t}\n\n\tget(options: GetGroupOptions): Promise<GroupResponseItem> {\n\t\treturn getGroup(this.config, options, \"private\");\n\t}\n\n\taddFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn addToGroup(this.config, options, \"private\");\n\t}\n\n\tremoveFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn removeFromGroup(this.config, options, \"private\");\n\t}\n\n\tupdate(options: UpdateGroupOptions): Promise<GroupResponseItem> {\n\t\treturn updateGroup(this.config, options, \"private\");\n\t}\n\n\tdelete(options: GetGroupOptions): Promise<string> {\n\t\treturn deleteGroup(this.config, options, \"private\");\n\t}\n}\n", "import type { PinataConfig } from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\nimport { PublicGroups } from \"./PublicGroups\";\nimport { PrivateGroups } from \"./PrivateGroups\";\n\nexport class Groups {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicGroups;\n\tprivate: PrivateGroups;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicGroups(config);\n\t\tthis.private = new PrivateGroups(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n", "import { FilterKeys } from \"./\";\nimport type {\n\tPinataConfig,\n\tKeyOptions,\n\tKeyResponse,\n\tRevokeKeyResponse,\n} from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\nimport { createKey, revokeKeys } from \"../../functions\";\n\nexport class Keys {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: KeyOptions): Promise<KeyResponse> {\n\t\treturn createKey(this.config, options);\n\t}\n\n\tlist(): FilterKeys {\n\t\treturn new FilterKeys(this.config);\n\t}\n\n\trevoke(keys: string[]): Promise<RevokeKeyResponse[]> {\n\t\treturn revokeKeys(this.config, keys);\n\t}\n}\n", "import { listKeys } from \"../../functions\";\nimport type { PinataConfig, KeyListQuery, KeyListItem } from \"../../types\";\n\nexport class FilterKeys {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: KeyListQuery = {};\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\toffset(offset: number): FilterKeys {\n\t\tthis.query.offset = offset;\n\t\treturn this;\n\t}\n\n\trevoked(revoked: boolean): FilterKeys {\n\t\tthis.query.revoked = revoked;\n\t\treturn this;\n\t}\n\n\tlimitedUse(limitedUse: boolean): FilterKeys {\n\t\tthis.query.limitedUse = limitedUse;\n\t\treturn this;\n\t}\n\n\texhausted(exhausted: boolean): FilterKeys {\n\t\tthis.query.exhausted = exhausted;\n\t\treturn this;\n\t}\n\n\tname(name: string): FilterKeys {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: KeyListItem[]) => any) | null): Promise<any> {\n\t\treturn listKeys(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<KeyListItem, void, unknown> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\n\t\twhile (hasMore) {\n\t\t\t//await this.rateLimit(); // applying rate limit\n\t\t\tthis.query.offset = offset;\n\n\t\t\tconst items = await listKeys(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<KeyListItem[]> {\n\t\tconst allItems: KeyListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n", "import type { PinataConfig } from \"../../types\";\nimport { PublicGateways, PrivateGateways } from \"./\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nexport class Gateways {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicGateways;\n\tprivate: PrivateGateways;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicGateways(config);\n\t\tthis.private = new PrivateGateways(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n", "import {\n\tPinataConfig,\n\tAccessLinkOptions,\n\tOptimizeImageOptions,\n} from \"../../types\";\nimport { createAccessLink } from \"../../functions/gateway/createAccessLink\";\n\nexport class OptimizeImageCreateAccessLink {\n\tprivate config: PinataConfig | undefined;\n\tprivate urlOpts: AccessLinkOptions;\n\tprivate imgOpts: OptimizeImageOptions = {};\n\n\tconstructor(config: PinataConfig | undefined, urlOpts: AccessLinkOptions) {\n\t\tthis.config = config;\n\t\tthis.urlOpts = urlOpts;\n\t}\n\n\toptimizeImage(options: OptimizeImageOptions): OptimizeImageCreateAccessLink {\n\t\tthis.imgOpts = { ...this.imgOpts, ...options };\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: string) => any) | null): Promise<any> {\n\t\treturn createAccessLink(this.config, this.urlOpts, this.imgOpts).then(\n\t\t\tonfulfilled,\n\t\t);\n\t}\n}\n", "import type {\n\tPinataConfig,\n\tOptimizeImageOptions,\n\tGetCIDResponse,\n} from \"../../types\";\nimport { getCid } from \"../../functions\";\n\nexport class OptimizeImageGetCid {\n\tprivate config: PinataConfig | undefined;\n\tprivate cid: string;\n\tprivate gatewayType?: \"ipfs\" | \"files\";\n\tprivate options: OptimizeImageOptions = {};\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tcid: string,\n\t\tgatewayType?: \"ipfs\" | \"files\",\n\t) {\n\t\tthis.config = config;\n\t\tthis.cid = cid;\n\t\tthis.gatewayType = gatewayType;\n\t}\n\n\toptimizeImage(options: OptimizeImageOptions): OptimizeImageGetCid {\n\t\tthis.options = { ...this.options, ...options };\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: GetCIDResponse) => any) | null): Promise<any> {\n\t\treturn getCid(this.config, this.cid, this.gatewayType, this.options).then(\n\t\t\tonfulfilled,\n\t\t);\n\t}\n}\n", "import type { PinataConfig, AccessLinkOptions } from \"../../types\";\nimport { OptimizeImageGetCid, OptimizeImageCreateAccessLink } from \"./\";\n\nexport class PrivateGateways {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tget(cid: string): OptimizeImageGetCid {\n\t\treturn new OptimizeImageGetCid(this.config, cid, \"files\");\n\t}\n\n\tcreateAccessLink(options: AccessLinkOptions): OptimizeImageCreateAccessLink {\n\t\treturn new OptimizeImageCreateAccessLink(this.config, options);\n\t}\n}\n", "import { convertIPFSUrl } from \"../../functions\";\nimport { PinataConfig } from \"../../types\";\nimport { OptimizeImageGetCid } from \"./\";\n\nexport class PublicGateways {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tget(cid: string): OptimizeImageGetCid {\n\t\treturn new OptimizeImageGetCid(this.config, cid, \"ipfs\");\n\t}\n\n\tconvert(url: string, gatewayPrefix?: string): Promise<string> {\n\t\treturn convertIPFSUrl(this.config, url, gatewayPrefix);\n\t}\n}\n", "import type { PinataConfig, FileListItem } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getFile = async (\n\tconfig: PinataConfig | undefined,\n\tid: string,\n\tprivacy: \"public\" | \"private\",\n): Promise<FileListItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting info for a group\",\n\t\t);\n\t}\n};\n", "import {\n\tPinataConfig,\n\tFileListQuery,\n\tFileListResponse,\n\tFileListItem,\n} from \"../../types\";\nimport { listFiles } from \"../../functions\";\n\nexport class FilterFiles {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: FileListQuery = {};\n\tprivate currentPageToken: string | undefined;\n\tprivate privacy: \"private\" | \"public\";\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined, privacy: \"private\" | \"public\") {\n\t\tthis.config = config;\n\t\tthis.privacy = privacy;\n\t}\n\n\tname(name: string): FilterFiles {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tgroup(group: string): FilterFiles {\n\t\tthis.query.group = group;\n\t\treturn this;\n\t}\n\n\tcid(cid: string): FilterFiles {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tmimeType(mimeType: string): FilterFiles {\n\t\tthis.query.mimeType = mimeType;\n\t\treturn this;\n\t}\n\n\torder(order: \"ASC\" | \"DESC\"): FilterFiles {\n\t\tthis.query.order = order;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): FilterFiles {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tcidPending(cidPending: boolean): FilterFiles {\n\t\tthis.query.cidPending = cidPending;\n\t\treturn this;\n\t}\n\n\tkeyvalues(keyvalues: Record<string, string>): FilterFiles {\n\t\tthis.query.metadata = keyvalues;\n\t\treturn this;\n\t}\n\n\tnoGroup(noGroup: boolean): FilterFiles {\n\t\tthis.query.noGroup = noGroup;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterFiles {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: FileListResponse) => any) | null): Promise<any> {\n\t\treturn this.fetchPage().then(onfulfilled);\n\t}\n\n\tprivate async fetchPage(): Promise<FileListResponse> {\n\t\tif (this.currentPageToken) {\n\t\t\tthis.query.pageToken = this.currentPageToken;\n\t\t}\n\t\tconst response = await listFiles(this.config, this.privacy, this.query);\n\t\tthis.currentPageToken = response.next_page_token;\n\t\treturn response;\n\t}\n\n\t// // rate limit, hopefully temporary?\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<FileListItem, void, unknown> {\n\t\twhile (true) {\n\t\t\tconst items = await this.fetchPage();\n\t\t\tfor (const item of items.files) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!this.currentPageToken) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<FileListItem[]> {\n\t\tconst allItems: FileListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n", "import {\n\tPinQueueItem,\n\tPinQueueQuery,\n\tPinQueueResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport { queue } from \"../../functions\";\n\nexport class FilterQueue {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: PinQueueQuery = {};\n\tprivate currentPageToken: string | undefined;\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tcid(cid: string): FilterQueue {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tstatus(\n\t\tstatus:\n\t\t\t| \"prechecking\"\n\t\t\t| \"retrieving\"\n\t\t\t| \"expired\"\n\t\t\t| \"backfilled\"\n\t\t\t| \"over_free_limit\"\n\t\t\t| \"over_max_size\"\n\t\t\t| \"invalid_object\"\n\t\t\t| \"bad_host_node\",\n\t): FilterQueue {\n\t\tthis.query.status = status;\n\t\treturn this;\n\t}\n\n\tpageLimit(limit: number): FilterQueue {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterQueue {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tprivate async fetchPage(): Promise<PinQueueResponse> {\n\t\tif (this.currentPageToken) {\n\t\t\tthis.query.pageToken = this.currentPageToken;\n\t\t}\n\t\tconst response = await queue(this.config, this.query);\n\t\tthis.currentPageToken = response.next_page_token;\n\t\treturn response;\n\t}\n\n\tsort(sort: \"ASC\" | \"DSC\"): FilterQueue {\n\t\tthis.query.sort = sort;\n\t\treturn this;\n\t}\n\n\tthen(onfulfilled?: ((value: PinQueueResponse) => any) | null): Promise<any> {\n\t\treturn queue(this.config, this.query).then(onfulfilled);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<PinQueueItem, void, unknown> {\n\t\twhile (true) {\n\t\t\tconst items = await this.fetchPage();\n\t\t\tfor (const item of items.jobs) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!this.currentPageToken) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<PinQueueItem[]> {\n\t\tconst allItems: PinQueueItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tdeleteFile,\n\tupdateFile,\n\tswapCid,\n\tswapHistory,\n\tdeleteSwap,\n\tdeletePinRequest,\n} from \"../../functions\";\nimport { getFile } from \"../../functions/files/getFile\";\nimport {\n\tPinataConfig,\n\tDeleteResponse,\n\tUpdateFileOptions,\n\tFileListItem,\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tSwapHistoryOptions,\n} from \"../../types\";\nimport { FilterFiles } from \"./FilterFiles\";\nimport { FilterQueue } from \"./FilterQueue\";\n\nexport class PublicFiles {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tlist(): FilterFiles {\n\t\treturn new FilterFiles(this.config, \"public\");\n\t}\n\n\tget(id: string): Promise<FileListItem> {\n\t\treturn getFile(this.config, id, \"public\");\n\t}\n\n\tdelete(files: string[]): Promise<DeleteResponse[]> {\n\t\treturn deleteFile(this.config, files, \"public\");\n\t}\n\n\tupdate(options: UpdateFileOptions): Promise<FileListItem> {\n\t\treturn updateFile(this.config, options, \"public\");\n\t}\n\n\taddSwap(options: SwapCidOptions): Promise<SwapCidResponse> {\n\t\treturn swapCid(this.config, options, \"public\");\n\t}\n\n\tgetSwapHistory(options: SwapHistoryOptions): Promise<SwapCidResponse[]> {\n\t\treturn swapHistory(this.config, options, \"public\");\n\t}\n\n\tdeleteSwap(cid: string): Promise<string> {\n\t\treturn deleteSwap(this.config, cid, \"public\");\n\t}\n\n\tqueue(): FilterQueue {\n\t\treturn new FilterQueue(this.config);\n\t}\n\n\tdeletePinRequest(requestId: string): Promise<string> {\n\t\treturn deletePinRequest(this.config, requestId);\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tdeleteFile,\n\tupdateFile,\n\tswapCid,\n\tswapHistory,\n\tdeleteSwap,\n\tvectorizeFile,\n\tvectorizeQuery,\n\tdeleteFileVectors,\n} from \"../../functions\";\nimport { getFile } from \"../../functions/files/getFile\";\nimport {\n\tPinataConfig,\n\tDeleteResponse,\n\tUpdateFileOptions,\n\tFileListItem,\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tSwapHistoryOptions,\n\tVectorizeFileResponse,\n\tVectorizeQuery,\n\tVectorizeQueryResponse,\n\tGetCIDResponse,\n} from \"../../types\";\nimport { FilterFiles } from \"./FilterFiles\";\n\nexport class PrivateFiles {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tlist(): FilterFiles {\n\t\treturn new FilterFiles(this.config, \"private\");\n\t}\n\n\tget(id: string): Promise<FileListItem> {\n\t\treturn getFile(this.config, id, \"private\");\n\t}\n\n\tdelete(files: string[]): Promise<DeleteResponse[]> {\n\t\treturn deleteFile(this.config, files, \"private\");\n\t}\n\n\tupdate(options: UpdateFileOptions): Promise<FileListItem> {\n\t\treturn updateFile(this.config, options, \"private\");\n\t}\n\n\taddSwap(options: SwapCidOptions): Promise<SwapCidResponse> {\n\t\treturn swapCid(this.config, options, \"private\");\n\t}\n\n\tgetSwapHistory(options: SwapHistoryOptions): Promise<SwapCidResponse[]> {\n\t\treturn swapHistory(this.config, options, \"private\");\n\t}\n\n\tdeleteSwap(cid: string): Promise<string> {\n\t\treturn deleteSwap(this.config, cid, \"private\");\n\t}\n\n\tvectorize(fileId: string): Promise<VectorizeFileResponse> {\n\t\treturn vectorizeFile(this.config, fileId);\n\t}\n\n\tqueryVectors(\n\t\toptions: VectorizeQuery,\n\t): Promise<VectorizeQueryResponse | GetCIDResponse> {\n\t\treturn vectorizeQuery(this.config, options);\n\t}\n\n\tdeleteVectors(fileId: string): Promise<VectorizeFileResponse> {\n\t\treturn deleteFileVectors(this.config, fileId);\n\t}\n}\n", "import { PinataConfig } from \"../../types\";\n\nimport { formatConfig } from \"../../../utils/format-config\";\n\nimport { PublicFiles } from \"./PublicFiles\";\nimport { PrivateFiles } from \"./PrivateFiles\";\n\nexport class Files {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicFiles;\n\tprivate: PrivateFiles;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicFiles(config);\n\t\tthis.private = new PrivateFiles(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n", "import type { PinataConfig, PinataMetadata, UploadOptions } from \"../../types\";\n\nexport class UploadBuilder<T> {\n\tprivate config: PinataConfig | undefined;\n\tprivate uploadFunction: (\n\t\tconfig: PinataConfig | undefined,\n\t\t...args: any[]\n\t) => Promise<T>;\n\tprivate args: any[];\n\tprivate metadata: PinataMetadata | undefined = {};\n\tprivate keys: string | undefined;\n\tprivate groupId: string | undefined;\n\tprivate vector: boolean | undefined;\n\tprivate uploadUrl: string | undefined;\n\tprivate isStreamable: boolean | undefined;\n\tprivate peerAddresses: string[] | undefined;\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tuploadFunction: (\n\t\t\tconfig: PinataConfig | undefined,\n\t\t\t...args: any[]\n\t\t) => Promise<T>,\n\t\t...args: any[]\n\t) {\n\t\tthis.config = config;\n\t\tthis.uploadFunction = uploadFunction;\n\t\tthis.args = args;\n\t}\n\n\t// Replace addMetadata with these two methods:\n\tname(name: string): UploadBuilder<T> {\n\t\tif (!this.metadata) {\n\t\t\tthis.metadata = {};\n\t\t}\n\t\tthis.metadata.name = name;\n\t\treturn this;\n\t}\n\n\tkeyvalues(keyvalues: Record<string, string>): UploadBuilder<T> {\n\t\tif (!this.metadata) {\n\t\t\tthis.metadata = {};\n\t\t}\n\t\tthis.metadata.keyvalues = keyvalues;\n\t\treturn this;\n\t}\n\n\tkey(jwt: string): UploadBuilder<T> {\n\t\tthis.keys = jwt;\n\t\treturn this;\n\t}\n\n\tvectorize(): UploadBuilder<T> {\n\t\tthis.vector = true;\n\t\treturn this;\n\t}\n\n\turl(url: string): UploadBuilder<T> {\n\t\tthis.uploadUrl = url;\n\t\treturn this;\n\t}\n\n\t// cidVersion(v: 0 | 1): UploadBuilder<T> {\n\t// \tthis.version = v;\n\t// \treturn this;\n\t// }\n\n\tgroup(groupId: string): UploadBuilder<T> {\n\t\tthis.groupId = groupId;\n\t\treturn this;\n\t}\n\n\tstreamable(): UploadBuilder<T> {\n\t\tthis.isStreamable = true;\n\t\treturn this;\n\t}\n\n\tpeerAddress(peerAddresses: string[]): UploadBuilder<T> {\n\t\tthis.peerAddresses = peerAddresses;\n\t\treturn this;\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonfulfilled?:\n\t\t\t| ((value: T) => TResult1 | PromiseLike<TResult1>)\n\t\t\t| null\n\t\t\t| undefined,\n\t\tonrejected?:\n\t\t\t| ((reason: any) => TResult2 | PromiseLike<TResult2>)\n\t\t\t| null\n\t\t\t| undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\tconst options: UploadOptions = this.args[this.args.length - 1] || {};\n\t\tif (this.metadata) {\n\t\t\toptions.metadata = this.metadata;\n\t\t}\n\t\tif (this.keys) {\n\t\t\toptions.keys = this.keys;\n\t\t}\n\t\tif (this.groupId) {\n\t\t\toptions.groupId = this.groupId;\n\t\t}\n\t\tif (this.vector) {\n\t\t\toptions.vectorize = this.vector;\n\t\t}\n\t\tif (this.uploadUrl) {\n\t\t\toptions.url = this.uploadUrl;\n\t\t}\n\t\tif (this.isStreamable) {\n\t\t\toptions.streamable = this.isStreamable;\n\t\t}\n\t\tif (this.peerAddresses) {\n\t\t\toptions.peerAddresses = this.peerAddresses;\n\t\t}\n\t\tthis.args[this.args.length - 1] = options;\n\t\treturn this.uploadFunction(this.config, ...this.args).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tcreateSignedUploadURL,\n\tuploadBase64,\n\tuploadFile,\n\tuploadFileArray,\n\tuploadJson,\n\tuploadUrl,\n} from \"../../functions\";\nimport { uploadCid } from \"../../functions/uploads/cid\";\nimport {\n\tFileObject,\n\tPinataConfig,\n\tSignedUploadUrlOptions,\n\tUploadOptions,\n\tUploadResponse,\n\tUploadCIDOptions,\n\tPinByCIDResponse,\n} from \"../../types\";\nimport { UploadBuilder } from \"./UploadBuilder\";\n\nexport class PublicUpload {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tfile(file: File, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) => uploadFile(config, file, \"public\", options),\n\t\t\tfile,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfileArray(\n\t\tfiles: File[],\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) =>\n\t\t\t\tuploadFileArray(config, file, \"public\", options),\n\t\t\tfiles,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tbase64(\n\t\tbase64String: string,\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, base64String, options) =>\n\t\t\t\tuploadBase64(config, base64String, \"public\", options),\n\t\t\tbase64String,\n\t\t\toptions,\n\t\t);\n\t}\n\n\turl(url: string, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, url, options) => uploadUrl(config, url, \"public\", options),\n\t\t\turl,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tjson(data: object, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, data, options) => uploadJson(config, data, \"public\", options),\n\t\t\tdata,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcid(\n\t\tcid: string,\n\t\toptions?: UploadCIDOptions,\n\t): UploadBuilder<PinByCIDResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, cid, options) => uploadCid(config, cid, options),\n\t\t\tcid,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcreateSignedURL(options: SignedUploadUrlOptions): Promise<string> {\n\t\treturn createSignedUploadURL(this.config, options, \"public\");\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tcreateSignedUploadURL,\n\tuploadBase64,\n\tuploadFile,\n\tuploadFileArray,\n\tuploadJson,\n\tuploadUrl,\n} from \"../../functions\";\nimport {\n\tFileObject,\n\tPinataConfig,\n\tSignedUploadUrlOptions,\n\tUploadOptions,\n\tUploadResponse,\n} from \"../../types\";\nimport { UploadBuilder } from \"./UploadBuilder\";\n\nexport class PrivateUpload {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tfile(file: File, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) => uploadFile(config, file, \"private\", options),\n\t\t\tfile,\n\t\t\toptions,\n\t\t);\n\t}\n\n\t// Reserved for future release\n\t// fileArray(\n\t// \tfiles: FileObject[],\n\t// \toptions?: UploadOptions,\n\t// ): UploadBuilder<UploadResponse> {\n\t// \treturn new UploadBuilder(\n\t// \t\tthis.config,\n\t// \t\t(config, file, options) =>\n\t// \t\t\tuploadFileArray(config, file, \"private\", options),\n\t// \t\tfiles,\n\t// \t\toptions,\n\t// \t);\n\t// }\n\n\tbase64(\n\t\tbase64String: string,\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, base64String, options) =>\n\t\t\t\tuploadBase64(config, base64String, \"private\", options),\n\t\t\tbase64String,\n\t\t\toptions,\n\t\t);\n\t}\n\n\turl(url: string, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, url, options) => uploadUrl(config, url, \"private\", options),\n\t\t\turl,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tjson(data: object, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, data, options) => uploadJson(config, data, \"private\", options),\n\t\t\tdata,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcreateSignedURL(options: SignedUploadUrlOptions): Promise<string> {\n\t\treturn createSignedUploadURL(this.config, options, \"private\");\n\t}\n}\n", "import { PinataConfig } from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nimport { PublicUpload } from \"./PublicUpload\";\nimport { PrivateUpload } from \"./PrivateUpload\";\n\nexport class Upload {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicUpload;\n\tprivate: PrivateUpload;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicUpload(config);\n\t\tthis.private = new PrivateUpload(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n", "import type {\n\tSignatureOptions,\n\tPinataConfig,\n\tSignatureResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const addSignature = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SignatureOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tsignature: options.signature,\n\t\taddress: options.address,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${options.cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized signing, you must be the original owner of the file and it must not have a signature\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig, SignatureResponse } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching signature for CID\",\n\t\t);\n\t}\n};\n", "import type { PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const removeSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/removeSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\treturn \"OK\";\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddSignature,\n\tgetSignature,\n\tremoveSignature,\n} from \"../../functions/signatures\";\nimport { PinataConfig, SignatureOptions, SignatureResponse } from \"../../types\";\n\nexport class PublicSignatures {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tadd(options: SignatureOptions): Promise<SignatureResponse> {\n\t\treturn addSignature(this.config, options, \"public\");\n\t}\n\n\tget(cid: string): Promise<SignatureResponse> {\n\t\treturn getSignature(this.config, cid, \"public\");\n\t}\n\n\tdelete(cid: string): Promise<string> {\n\t\treturn removeSignature(this.config, cid, \"public\");\n\t}\n}\n", "import { formatConfig } from \"../../../utils/format-config\";\nimport { PinataConfig } from \"../../types\";\nimport { PrivateSignatures } from \"./PrivateSignatures\";\nimport { PublicSignatures } from \"./PublicSignatures\";\n\nexport class Signatures {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicSignatures;\n\t//private: PrivateSignatures\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicSignatures(config);\n\t\t// this.private = new PrivateSignatures(config)\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n", "import { testAuthentication } from \"./functions\";\nimport { formatConfig } from \"../utils\";\nimport {\n\tAnalytics,\n\tGroups,\n\tKeys,\n\tGateways,\n\tFiles,\n\tUpload,\n\tSignatures,\n} from \"./classes\";\nimport { PinataConfig } from \"./types\";\n\nexport class PinataSDK {\n\tconfig: PinataConfig | undefined;\n\tfiles: Files;\n\tupload: Upload;\n\tgateways: Gateways;\n\t//\tusage: Usage;\n\tkeys: Keys;\n\tgroups: Groups;\n\tanalytics: Analytics;\n\tsignatures: Signatures;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.files = new Files(this.config);\n\t\tthis.upload = new Upload(this.config);\n\t\tthis.gateways = new Gateways(this.config);\n\t\t//\t\tthis.usage = new Usage(this.config);\n\t\tthis.keys = new Keys(this.config);\n\t\tthis.groups = new Groups(this.config);\n\t\tthis.analytics = new Analytics(this.config);\n\t\tthis.signatures = new Signatures(this.config);\n\t}\n\n\tsetNewHeaders(headers: Record<string, string>): void {\n\t\tif (!this.config) {\n\t\t\tthis.config = { pinataJwt: \"\", customHeaders: {} };\n\t\t}\n\t\tthis.config.customHeaders = { ...this.config.customHeaders, ...headers };\n\n\t\t// Update headers for all sub-modules\n\t\tthis.files.updateConfig(this.config);\n\t\tthis.upload.updateConfig(this.config);\n\t\tthis.gateways.updateConfig(this.config);\n\t\t//\t\tthis.usage.updateConfig(this.config);\n\t\tthis.keys.updateConfig(this.config);\n\t\tthis.groups.updateConfig(this.config);\n\t\tthis.analytics.updateConfig(this.config);\n\t\tthis.signatures.updateConfig(this.config);\n\t}\n\n\tsetNewJwt(jwt: string): void {\n\t\tif (!this.config) {\n\t\t\tthis.config = { pinataJwt: \"\" };\n\t\t}\n\t\tthis.config.pinataJwt = jwt;\n\n\t\t// Update headers for all sub-modules\n\t\tthis.files.updateConfig(this.config);\n\t\tthis.upload.updateConfig(this.config);\n\t\tthis.gateways.updateConfig(this.config);\n\t\t//\t\tthis.usage.updateConfig(this.config);\n\t\tthis.keys.updateConfig(this.config);\n\t\tthis.groups.updateConfig(this.config);\n\t\tthis.analytics.updateConfig(this.config);\n\t\tthis.signatures.updateConfig(this.config);\n\t}\n\n\ttestAuthentication(): Promise<string> {\n\t\treturn testAuthentication(this.config);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["uploadUrl", "wait", "headers", "data", "file", "options", "base64String", "url", "cid"]
}
