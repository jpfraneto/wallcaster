{
  "version": 3,
  "sources": ["../../@solana/web3.js/node_modules/bs58/node_modules/base-x/src/index.js", "../../@solana/web3.js/node_modules/bs58/index.js", "../../@noble/curves/src/ed25519.ts", "../../@noble/curves/src/abstract/curve.ts", "../../@noble/curves/src/abstract/modular.ts", "../../@noble/curves/src/abstract/utils.ts", "../../@noble/curves/src/abstract/edwards.ts", "../../@noble/curves/src/abstract/hash-to-curve.ts", "../../@noble/curves/src/abstract/montgomery.ts", "../../@solana/web3.js/node_modules/superstruct/src/error.ts", "../../@solana/web3.js/node_modules/superstruct/src/utils.ts", "../../@solana/web3.js/node_modules/superstruct/src/struct.ts", "../../@solana/web3.js/node_modules/superstruct/src/structs/utilities.ts", "../../@solana/web3.js/node_modules/superstruct/src/structs/types.ts", "../../@solana/web3.js/node_modules/superstruct/src/structs/coercions.ts", "../../@solana/web3.js/node_modules/superstruct/src/structs/refinements.ts", "../../@noble/curves/src/secp256k1.ts", "../../@noble/curves/src/_shortw_utils.ts", "../../@noble/curves/src/abstract/weierstrass.ts", "../../@solana/web3.js/src/utils/ed25519.ts", "../../@solana/web3.js/src/utils/to-buffer.ts", "../../@solana/web3.js/src/utils/borsh-schema.ts", "../../@solana/web3.js/src/publickey.ts", "../../@solana/web3.js/src/account.ts", "../../@solana/web3.js/src/bpf-loader-deprecated.ts", "../../@solana/web3.js/src/transaction/constants.ts", "../../@solana/web3.js/src/transaction/expiry-custom-errors.ts", "../../@solana/web3.js/src/message/account-keys.ts", "../../@solana/web3.js/src/layout.ts", "../../@solana/web3.js/src/utils/shortvec-encoding.ts", "../../@solana/web3.js/src/utils/assert.ts", "../../@solana/web3.js/src/message/compiled-keys.ts", "../../@solana/web3.js/src/utils/guarded-array-utils.ts", "../../@solana/web3.js/src/message/legacy.ts", "../../@solana/web3.js/src/message/v0.ts", "../../@solana/web3.js/src/message/versioned.ts", "../../@solana/web3.js/src/transaction/legacy.ts", "../../@solana/web3.js/src/transaction/message.ts", "../../@solana/web3.js/src/transaction/versioned.ts", "../../@solana/web3.js/src/timing.ts", "../../@solana/web3.js/src/sysvar.ts", "../../@solana/web3.js/src/errors.ts", "../../@solana/web3.js/src/utils/send-and-confirm-transaction.ts", "../../@solana/web3.js/src/utils/sleep.ts", "../../@solana/web3.js/src/instruction.ts", "../../@solana/web3.js/src/fee-calculator.ts", "../../@solana/web3.js/src/nonce-account.ts", "../../@solana/web3.js/src/utils/bigint.ts", "../../@solana/web3.js/src/programs/system.ts", "../../@solana/web3.js/src/loader.ts", "../../@solana/web3.js/src/bpf-loader.ts", "../../@solana/web3.js/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js", "../../@solana/web3.js/src/epoch-schedule.ts", "../../@solana/web3.js/src/__forks__/browser/fetch-impl.ts", "../../@solana/web3.js/src/rpc-websocket.ts", "../../@solana/web3.js/src/account-data.ts", "../../@solana/web3.js/src/programs/address-lookup-table/state.ts", "../../@solana/web3.js/src/utils/makeWebsocketUrl.ts", "../../@solana/web3.js/src/connection.ts", "../../@solana/web3.js/src/keypair.ts", "../../@solana/web3.js/src/programs/address-lookup-table/index.ts", "../../@solana/web3.js/src/programs/compute-budget.ts", "../../@solana/web3.js/src/programs/ed25519.ts", "../../@solana/web3.js/src/utils/secp256k1.ts", "../../@solana/web3.js/src/programs/secp256k1.ts", "../../@solana/web3.js/src/programs/stake.ts", "../../@solana/web3.js/src/programs/vote.ts", "../../@solana/web3.js/src/validator-info.ts", "../../@solana/web3.js/src/vote-account.ts", "../../@solana/web3.js/src/utils/cluster.ts", "../../@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts", "../../@solana/web3.js/src/index.ts"],
  "sourcesContent": ["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { type AffinePoint, type Group, pippenger } from './abstract/curve.js';\nimport { type CurveFn, type ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport {\n  createHasher,\n  expand_message_xmd,\n  type htfBasicOpts,\n  type HTFMethod,\n} from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery, type CurveFn as XCurveFn } from './abstract/montgomery.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  type Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() =>\n  ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n  }) as const)();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>): RistPoint {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  static msm(points: RistPoint[], scalars: bigint[]): RistPoint {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint: typeof RistPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts): RistPoint => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255: (msg: Uint8Array, options: htfBasicOpts) => RistPoint =\n  hashToRistretto255; // legacy\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\nfunction calcWOpts(W: number, bits: number) {\n  validateW(W, bits);\n  const windows = Math.ceil(bits / W) + 1; // +1, because\n  const windowSize = 2 ** (W - 1); // -1 because we skip zero\n  return { windows, windowSize };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = calcWOpts(W, bits);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        if (n === _0n) break; // No need to go over empty scalar\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) continue;\n        let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n        if (wbits < 0) curr = curr.negate();\n        // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n        acc = acc.add(curr);\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  if (points.length !== scalars.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = BigInt((1 << windowSize) - 1);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n =/* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order: bigint): <T>(f: IField<T>, x: T) => T {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>): (x: T) => boolean {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport { Field, mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, type FHash, type Hex, memoized } from './utils.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n/** Edwards curves must declare params a & d. */\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\nexport type CurveTypeWithLength = Readonly<CurveType & { nByteLength: number; nBitLength: number }>;\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType): CurveTypeWithLength {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n  _setWindowSize(windowSize: number): void;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Edwards Curve interface.\n * Main methods: `getPublicKey(priv)`, `sign(msg, priv)`, `verify(sig, msg, pub)`.\n */\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n};\n\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title: string, n: bigint) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n\n  function assertPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      assertPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      assertPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, iz);\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: ExtPointType = Point.BASE): ExtPointType {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n", "/**\n * hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\nimport { type IField, mod } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (\n  x: T,\n  y: T\n) => {\n  x: T;\n  y: T;\n};\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]): XY<T> {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x: x, y: y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type HTFMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n): {\n  hashToCurve: HTFMethod<T>;\n  encodeToCurve: HTFMethod<T>;\n  mapToCurve: MapMethod<T>;\n} {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport {\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, _0n, P);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen) {\n      let valid = '' + montgomeryBytes + ' or ' + fieldLen;\n      throw new Error('invalid scalar, expected ' + valid + ' bytes, got ' + len);\n    }\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n", null, null, null, null, null, null, null, "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.js';\nimport { createHasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\n\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.js';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.js';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport {\n  Field,\n  type IField,\n  getMinHashLength,\n  invert,\n  mapHashToField,\n  mod,\n  validateField,\n} from './modular.js';\nimport * as ut from './utils.js';\nimport { type CHash, type Hex, type PrivKey, abool, ensureBytes, memoized } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n", "import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n", "import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n", "import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n", "import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n", "import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n", "/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n", "export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n", "import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n", "export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n", "export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n", "const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n", "import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n", "import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n", "import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n", "// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n", "import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n", "import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n", "import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {getU64Codec} from '@solana/codecs-numbers';\n\nexport function u64(property?: string): Layout<bigint> {\n  const layout = blob(8 /* bytes */, property);\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n\n  const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n  const codec = getU64Codec();\n\n  bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n    const src = decode(buffer as Uint8Array, offset);\n    return codec.decode(src);\n  };\n\n  bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n    const src = codec.encode(bigInt) as Uint8Array;\n    return encode(src, buffer as Uint8Array, offset);\n  };\n\n  return bigIntLayout;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n", "import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n", "var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n", "const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n", "export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n", "import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n", "const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n", "import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n", "import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport {getU64Encoder} from '@solana/codecs-numbers';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [\n        params.authority.toBuffer(),\n        getU64Encoder().encode(params.recentSlot) as Uint8Array,\n      ],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n", "const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n", "import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],
  "mappings": "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",
  "names": ["import_dist", "i", "j", "string", "import_dist", "import_dist", "import_dist", "import_dist", "concatBytes", "utf8ToBytes", "import_dist", "num", "array", "type", "_0n", "_1n", "_2n", "num", "number", "Fp", "bitLen", "_0n", "_1n", "num", "Fp", "num", "_1n", "_0n", "_1n", "mask", "offset", "offset2", "wbits", "import_dist", "_0n", "_1n", "_2n", "_8n", "Fp", "randomBytes", "modP", "uvRatio", "adjustScalarBytes", "Point", "G", "A", "B", "F", "C", "D", "E", "H", "X3", "Y3", "T3", "Z3", "cofactor", "modN", "getPublicKey", "concatBytes", "sign", "verify", "publicKey", "import_dist", "concatBytes", "utf8ToBytes", "Point", "import_dist", "_0n", "_1n", "validateOpts", "modP", "adjustScalarBytes", "publicKey", "_0n", "_1n", "_2n", "_3n", "_5n", "_8n", "pow", "_8n", "_3n", "_3n", "_8n", "_2n", "_5n", "_1n", "number", "mod", "_0n", "import_dist", "struct", "type", "coerce", "mask", "tuple", "struct", "struct", "struct", "import_dist", "import_dist", "import_dist", "Fp", "num", "_0n", "seq", "_1n", "_2n", "_3n", "_4n", "concatBytes", "Point", "a", "validateOpts", "modN", "number", "getPublicKey", "randomBytes", "sign", "verify", "signature", "publicKey", "is", "tv5", "c1", "c2", "create", "_1n", "_2n", "_3n", "_0n", "concatBytes", "signature", "publicKey", "htf", "hashToCurve", "encodeToCurve", "generatePrivateKey", "ed25519", "utils", "randomPrivateKey", "generateKeypair", "privateScalar", "publicKey", "getPublicKey", "secretKey", "Uint8Array", "set", "isOnCurve", "ExtendedPoint", "fromHex", "sign", "message", "slice", "verify", "toBuffer", "arr", "Buffer", "isBuffer", "from", "buffer", "byteOffset", "byteLength", "Struct", "constructor", "properties", "Object", "assign", "encode", "serialize", "SOLANA_SCHEMA", "decode", "data", "deserialize", "decodeUnchecked", "deserializeUnchecked", "Enum", "enum", "keys", "length", "Error", "map", "key", "Map", "MAX_SEED_LENGTH", "PUBLIC_KEY_LENGTH", "isPublicKeyData", "value", "_bn", "undefined", "uniquePublicKeyCounter", "PublicKey", "decoded", "bs58", "BN", "unique", "equals", "eq", "toBase58", "toBytes", "toJSON", "buf", "b", "toArrayLike", "zeroPad", "alloc", "copy", "Symbol", "toStringTag", "toString", "createWithSeed", "fromPublicKey", "seed", "programId", "concat", "publicKeyBytes", "sha256", "createProgramAddressSync", "seeds", "forEach", "TypeError", "createProgramAddress", "findProgramAddressSync", "nonce", "address", "seedsWithNonce", "err", "findProgramAddress", "pubkeyData", "pubkey", "_PublicKey", "default", "kind", "fields", "Account", "_publicKey", "_secretKey", "secretKeyBuffer", "BPF_LOADER_DEPRECATED_PROGRAM_ID", "PACKET_DATA_SIZE", "VERSION_PREFIX_MASK", "SIGNATURE_LENGTH_IN_BYTES", "TransactionExpiredBlockheightExceededError", "signature", "defineProperty", "prototype", "TransactionExpiredTimeoutError", "timeoutSeconds", "toFixed", "TransactionExpiredNonceInvalidError", "MessageAccountKeys", "staticAccountKeys", "accountKeysFromLookups", "keySegments", "push", "writable", "readonly", "get", "index", "keySegment", "flat", "compileInstructions", "instructions", "U8_MAX", "keyIndexMap", "findKeyIndex", "keyIndex", "instruction", "programIdIndex", "accountKeyIndexes", "meta", "property", "blob", "rustString", "rsl", "struct", "u32", "offset", "_decode", "bind", "_encode", "rslShim", "str", "chars", "span", "authorized", "lockup", "ns64", "voteInit", "u8", "voteAuthorizeWithSeedArgs", "getAlloc", "type", "getItemAlloc", "item", "field", "Array", "isArray", "elementLayout", "layout", "decodeLength", "bytes", "len", "size", "elem", "shift", "encodeLength", "rem_len", "assert", "condition", "CompiledKeys", "payer", "keyMetaMap", "compile", "getOrInsertDefault", "keyMeta", "isSigner", "isWritable", "isInvoked", "payerKeyMeta", "ix", "accountMeta", "getMessageComponents", "mapEntries", "entries", "writableSigners", "filter", "readonlySigners", "writableNonSigners", "readonlyNonSigners", "header", "numRequiredSignatures", "numReadonlySignedAccounts", "numReadonlyUnsignedAccounts", "payerAddress", "extractTableLookup", "lookupTable", "writableIndexes", "drainedWritableKeys", "drainKeysFoundInLookupTable", "state", "addresses", "readonlyIndexes", "drainedReadonlyKeys", "accountKey", "lookupTableEntries", "keyMetaFilter", "lookupTableIndexes", "drainedKeys", "lookupTableIndex", "findIndex", "entry", "delete", "END_OF_BUFFER_ERROR_MESSAGE", "guardedShift", "byteArray", "guardedSplice", "args", "start", "splice", "Message", "accountKeys", "recentBlockhash", "indexToProgramIds", "account", "version", "compiledInstructions", "accounts", "addressTableLookups", "getAccountKeys", "compiledKeys", "payerKey", "isAccountSigner", "isAccountWritable", "numSignedAccounts", "unsignedAccountIndex", "numUnsignedAccounts", "numWritableUnsignedAccounts", "numWritableSignedAccounts", "isProgramId", "has", "programIds", "values", "nonProgramIds", "_", "numKeys", "keyCount", "shortvec", "keyIndicesCount", "dataCount", "keyIndices", "dataLength", "instructionCount", "instructionBuffer", "instructionBufferLength", "instructionLayout", "seq", "signDataLayout", "Layout", "transaction", "signData", "accountCount", "i", "dataSlice", "messageArgs", "MessageV0", "numAccountKeysFromLookups", "count", "lookup", "addressLookupTableAccounts", "resolveAddressTableLookups", "numStaticAccountKeys", "lookupAccountKeysIndex", "numWritableLookupAccountKeys", "reduce", "tableLookup", "tableAccount", "find", "lookupTableAccounts", "extractResult", "addressTableLookup", "encodedStaticAccountKeysLength", "serializedInstructions", "serializeInstructions", "encodedInstructionsLength", "serializedAddressTableLookups", "serializeAddressTableLookups", "encodedAddressTableLookupsLength", "messageLayout", "serializedMessage", "MESSAGE_VERSION_0_PREFIX", "serializedMessageLength", "prefix", "staticAccountKeysLength", "instructionsLength", "addressTableLookupsLength", "serializedLength", "encodedAccountKeyIndexesLength", "encodedDataLength", "encodedWritableIndexesLength", "encodedReadonlyIndexesLength", "addressTableLookupLayout", "maskedPrefix", "accountKeyIndexesLength", "addressTableLookupsCount", "writableIndexesLength", "readonlyIndexesLength", "VersionedMessage", "deserializeMessageVersion", "TransactionStatus", "DEFAULT_SIGNATURE", "fill", "TransactionInstruction", "opts", "Transaction", "signatures", "feePayer", "lastValidBlockHeight", "nonceInfo", "minNonceContextSlot", "_message", "_json", "hasOwnProperty", "call", "minContextSlot", "blockhash", "nonceInstruction", "signers", "add", "items", "compileMessage", "JSON", "stringify", "console", "warn", "accountMetas", "includes", "uniqueMetas", "pubkeyString", "uniqueIndex", "x", "sort", "y", "options", "localeMatcher", "usage", "sensitivity", "ignorePunctuation", "numeric", "caseFirst", "localeCompare", "feePayerIndex", "payerMeta", "unshift", "signedKeys", "unsignedKeys", "indexOf", "invariant", "_compile", "valid", "every", "pair", "serializeMessage", "getEstimatedFee", "connection", "getFeeForMessage", "setSigners", "seen", "Set", "uniqueSigners", "signer", "_partialSign", "partialSign", "_addSignature", "addSignature", "sigpair", "verifySignatures", "requireAllSignatures", "signatureErrors", "_getMessageSignednessErrors", "errors", "missing", "invalid", "config", "sigErrors", "errorMessage", "p", "join", "_serialize", "signatureCount", "transactionLength", "wireTransaction", "keyObj", "populate", "sigPubkeyPair", "some", "TransactionMessage", "decompile", "compiledIx", "compileToLegacyMessage", "compileToV0Message", "VersionedTransaction", "defaultSignatures", "encodedSignaturesLength", "transactionLayout", "serializedTransaction", "serializedTransactionLength", "signaturesLength", "messageData", "signerPubkeys", "signerIndex", "NUM_TICKS_PER_SECOND", "DEFAULT_TICKS_PER_SLOT", "NUM_SLOTS_PER_SECOND", "MS_PER_SLOT", "SYSVAR_CLOCK_PUBKEY", "SYSVAR_EPOCH_SCHEDULE_PUBKEY", "SYSVAR_INSTRUCTIONS_PUBKEY", "SYSVAR_RECENT_BLOCKHASHES_PUBKEY", "SYSVAR_RENT_PUBKEY", "SYSVAR_REWARDS_PUBKEY", "SYSVAR_SLOT_HASHES_PUBKEY", "SYSVAR_SLOT_HISTORY_PUBKEY", "SYSVAR_STAKE_HISTORY_PUBKEY", "SendTransactionError", "action", "transactionMessage", "logs", "maybeLogsOutput", "guideText", "a", "transactionLogs", "transactionError", "cachedLogs", "getLogs", "Promise", "resolve", "reject", "getTransaction", "then", "tx", "logMessages", "catch", "SolanaJSONRPCErrorCode", "JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP", "JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE", "JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY", "JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE", "JSON_RPC_SERVER_ERROR_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_NO_SNAPSHOT", "JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED", "JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX", "JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE", "JSON_RPC_SCAN_ERROR", "JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH", "JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET", "JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION", "JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED", "SolanaJSONRPCError", "code", "customMessage", "name", "sendAndConfirmTransaction", "sendOptions", "skipPreflight", "preflightCommitment", "commitment", "maxRetries", "sendTransaction", "status", "confirmTransaction", "abortSignal", "nonceAccountPubkey", "nonceValue", "sleep", "ms", "setTimeout", "encodeData", "allocLength", "layoutFields", "decodeData", "FeeCalculatorLayout", "nu64", "NonceAccountLayout", "NONCE_ACCOUNT_LENGTH", "NonceAccount", "authorizedPubkey", "feeCalculator", "fromAccountData", "nonceAccount", "u64", "bigIntLayout", "codec", "getU64Codec", "src", "bigInt", "SystemInstruction", "decodeInstructionType", "checkProgramId", "instructionTypeLayout", "typeIndex", "ixType", "SYSTEM_INSTRUCTION_LAYOUTS", "decodeCreateAccount", "checkKeyLength", "lamports", "space", "Create", "fromPubkey", "newAccountPubkey", "decodeTransfer", "Transfer", "toPubkey", "decodeTransferWithSeed", "TransferWithSeed", "basePubkey", "decodeAllocate", "Allocate", "accountPubkey", "decodeAllocateWithSeed", "base", "AllocateWithSeed", "decodeAssign", "Assign", "decodeAssignWithSeed", "AssignWithSeed", "decodeCreateWithSeed", "CreateWithSeed", "decodeNonceInitialize", "InitializeNonceAccount", "noncePubkey", "decodeNonceAdvance", "AdvanceNonceAccount", "decodeNonceWithdraw", "WithdrawNonceAccount", "decodeNonceAuthorize", "AuthorizeNonceAccount", "newAuthorizedPubkey", "SystemProgram", "expectedLength", "freeze", "UpgradeNonceAccount", "createAccount", "params", "transfer", "BigInt", "createAccountWithSeed", "createNonceAccount", "initParams", "nonceInitialize", "instructionData", "nonceAdvance", "nonceWithdraw", "nonceAuthorize", "allocate", "CHUNK_SIZE", "Loader", "getMinNumSignatures", "Math", "ceil", "chunkSize", "load", "program", "balanceNeeded", "getMinimumBalanceForRentExemption", "programInfo", "getAccountInfo", "executable", "error", "owner", "dataLayout", "array", "transactions", "bytesLength", "bytesLengthPadding", "_rpcEndpoint", "REQUESTS_PER_SECOND", "all", "deployCommitment", "finalizeSignature", "context", "currentSlot", "getSlot", "slot", "round", "BPF_LOADER_PROGRAM_ID", "BpfLoader", "elf", "loaderProgramId", "fastStableStringify", "MINIMUM_SLOT_PER_EPOCH", "trailingZeros", "n", "nextPowerOfTwo", "EpochSchedule", "slotsPerEpoch", "leaderScheduleSlotOffset", "warmup", "firstNormalEpoch", "firstNormalSlot", "getEpoch", "getEpochAndSlotIndex", "epoch", "epochLen", "getSlotsInEpoch", "slotIndex", "normalSlotIndex", "normalEpochIndex", "floor", "getFirstSlotInEpoch", "pow", "getLastSlotInEpoch", "globalThis", "fetch", "RpcWebSocketClient", "CommonClient", "generate_request_id", "webSocketFactory", "url", "rpc", "createRpc", "autoconnect", "max_reconnects", "reconnect", "reconnect_interval", "underlyingSocket", "socket", "readyState", "notify", "LOOKUP_TABLE_META_SIZE", "AddressLookupTableAccount", "isActive", "U64_MAX", "deactivationSlot", "accountData", "LookupTableMetaLayout", "serializedAddressesLen", "numSerializedAddresses", "lastExtendedSlot", "lastExtendedSlotStartIndex", "lastExtendedStartIndex", "authority", "URL_RE", "makeWebsocketUrl", "endpoint", "matches", "match", "hostish", "portWithColon", "rest", "protocol", "startsWith", "startPort", "parseInt", "websocketPort", "PublicKeyFromString", "coerce", "instance", "string", "RawAccountDataResult", "tuple", "literal", "BufferFromRawAccountData", "BLOCKHASH_CACHE_TIMEOUT_MS", "assertEndpointUrl", "putativeUrl", "test", "extractCommitmentFromConfig", "commitmentOrConfig", "specifiedCommitment", "specifiedConfig", "applyDefaultMemcmpEncodingToFilters", "filters", "memcmp", "encoding", "createRpcResult", "result", "union", "pick", "jsonrpc", "id", "unknown", "optional", "any", "UnknownRpcResult", "jsonRpcResult", "schema", "create", "jsonRpcResultAndContext", "number", "notificationResultAndContext", "versionedMessageFromResponse", "response", "GetInflationGovernorResult", "foundation", "foundationTerm", "initial", "taper", "terminal", "GetInflationRewardResult", "nullable", "effectiveSlot", "amount", "postBalance", "commission", "GetRecentPrioritizationFeesResult", "prioritizationFee", "GetInflationRateResult", "total", "validator", "GetEpochInfoResult", "slotsInEpoch", "absoluteSlot", "blockHeight", "transactionCount", "GetEpochScheduleResult", "boolean", "GetLeaderScheduleResult", "record", "TransactionErrorResult", "SignatureStatusResult", "SignatureReceivedResult", "VersionResult", "ParsedInstructionStruct", "parsed", "PartiallyDecodedInstructionStruct", "SimulatedTransactionResponseStruct", "rentEpoch", "unitsConsumed", "returnData", "innerInstructions", "BlockProductionResponseStruct", "byIdentity", "range", "firstSlot", "lastSlot", "createRpcClient", "httpHeaders", "customFetch", "fetchMiddleware", "disableRetryOnRateLimit", "httpAgent", "fetchImpl", "agent", "fetchWithMiddleware", "info", "init", "modifiedFetchArgs", "modifiedInfo", "modifiedInit", "clientBrowser", "RpcClient", "request", "callback", "method", "body", "headers", "COMMON_HTTP_HEADERS", "too_many_requests_retries", "res", "waitTime", "statusText", "text", "ok", "createRpcRequest", "client", "createRpcBatchRequest", "requests", "batch", "methodName", "GetInflationGovernorRpcResult", "GetInflationRateRpcResult", "GetRecentPrioritizationFeesRpcResult", "GetEpochInfoRpcResult", "GetEpochScheduleRpcResult", "GetLeaderScheduleRpcResult", "SlotRpcResult", "GetSupplyRpcResult", "circulating", "nonCirculating", "nonCirculatingAccounts", "TokenAmountResult", "uiAmount", "decimals", "uiAmountString", "GetTokenLargestAccountsResult", "GetTokenAccountsByOwner", "ParsedAccountDataResult", "GetParsedTokenAccountsByOwner", "GetLargestAccountsRpcResult", "AccountInfoResult", "KeyedAccountInfoResult", "ParsedOrRawAccountData", "ParsedAccountInfoResult", "KeyedParsedAccountInfoResult", "StakeActivationResult", "active", "inactive", "GetConfirmedSignaturesForAddress2RpcResult", "memo", "blockTime", "GetSignaturesForAddressRpcResult", "AccountNotificationResult", "subscription", "ProgramAccountInfoResult", "ProgramAccountNotificationResult", "SlotInfoResult", "parent", "root", "SlotNotificationResult", "SlotUpdateResult", "timestamp", "stats", "numTransactionEntries", "numSuccessfulTransactions", "numFailedTransactions", "maxTransactionsPerEntry", "SlotUpdateNotificationResult", "SignatureNotificationResult", "RootNotificationResult", "ContactInfoResult", "gossip", "tpu", "VoteAccountInfoResult", "votePubkey", "nodePubkey", "activatedStake", "epochVoteAccount", "epochCredits", "lastVote", "rootSlot", "GetVoteAccounts", "current", "delinquent", "ConfirmationStatus", "SignatureStatusResponse", "confirmations", "confirmationStatus", "GetSignatureStatusesRpcResult", "GetMinimumBalanceForRentExemptionRpcResult", "AddressTableLookupStruct", "ConfirmedTransactionResult", "AnnotatedAccountKey", "source", "ConfirmedTransactionAccountsModeResult", "ParsedInstructionResult", "RawInstructionResult", "InstructionResult", "UnknownInstructionResult", "ParsedOrRawInstruction", "ParsedConfirmedTransactionResult", "TokenBalanceResult", "accountIndex", "mint", "uiTokenAmount", "LoadedAddressesResult", "ConfirmedTransactionMetaResult", "fee", "preBalances", "postBalances", "preTokenBalances", "postTokenBalances", "loadedAddresses", "computeUnitsConsumed", "ParsedConfirmedTransactionMetaResult", "TransactionVersionStruct", "RewardsResult", "rewardType", "GetBlockRpcResult", "previousBlockhash", "parentSlot", "rewards", "GetNoneModeBlockRpcResult", "GetAccountsModeBlockRpcResult", "GetParsedBlockRpcResult", "GetParsedAccountsModeBlockRpcResult", "GetParsedNoneModeBlockRpcResult", "GetConfirmedBlockRpcResult", "GetBlockSignaturesRpcResult", "GetTransactionRpcResult", "GetParsedTransactionRpcResult", "GetLatestBlockhashRpcResult", "IsBlockhashValidRpcResult", "PerfSampleResult", "numTransactions", "numSlots", "samplePeriodSecs", "GetRecentPerformanceSamplesRpcResult", "GetFeeCalculatorRpcResult", "lamportsPerSignature", "RequestAirdropRpcResult", "SendTransactionRpcResult", "LogsResult", "LogsNotificationResult", "process", "Connection", "_commitment", "_confirmTransactionInitialTimeout", "_rpcWsEndpoint", "_rpcClient", "_rpcRequest", "_rpcBatchRequest", "_rpcWebSocket", "_rpcWebSocketConnected", "_rpcWebSocketHeartbeat", "_rpcWebSocketIdleTimeout", "_rpcWebSocketGeneration", "_disableBlockhashCaching", "_pollingBlockhash", "_blockhashInfo", "latestBlockhash", "lastFetch", "transactionSignatures", "simulatedSignatures", "_nextClientSubscriptionId", "_subscriptionDisposeFunctionsByClientSubscriptionId", "_subscriptionHashByClientSubscriptionId", "_subscriptionStateChangeCallbacksByHash", "_subscriptionCallbacksByServerSubscriptionId", "_subscriptionsByHash", "_subscriptionsAutoDisposedByRpc", "getBlockHeight", "requestPromises", "_buildArgs", "requestHash", "unsafeRes", "wsEndpoint", "confirmTransactionInitialTimeout", "Infinity", "on", "_wsOnOpen", "_wsOnError", "_wsOnClose", "_wsOnAccountNotification", "_wsOnProgramAccountNotification", "_wsOnSlotNotification", "_wsOnSlotUpdatesNotification", "_wsOnSignatureNotification", "_wsOnRootNotification", "_wsOnLogsNotification", "rpcEndpoint", "getBalanceAndContext", "getBalance", "e", "getBlockTime", "getMinimumLedgerSlot", "getFirstAvailableBlock", "getSupply", "configArg", "getTokenSupply", "tokenMintAddress", "getTokenAccountBalance", "tokenAddress", "getTokenAccountsByOwner", "ownerAddress", "_args", "getParsedTokenAccountsByOwner", "getLargestAccounts", "arg", "getTokenLargestAccounts", "mintAddress", "getAccountInfoAndContext", "getParsedAccountInfo", "getMultipleParsedAccounts", "publicKeys", "rawConfig", "getMultipleAccountsInfoAndContext", "getMultipleAccountsInfo", "getStakeActivation", "getProgramAccounts", "configOrCommitment", "configWithoutEncoding", "baseSchema", "withContext", "getParsedProgramAccounts", "strategy", "rawSignature", "aborted", "reason", "decodedSignature", "confirmTransactionUsingLegacyTimeoutStrategy", "confirmTransactionUsingBlockHeightExceedanceStrategy", "confirmTransactionUsingDurableNonceStrategy", "getCancellationPromise", "signal", "addEventListener", "getTransactionConfirmationPromise", "signatureSubscriptionId", "disposeSignatureSubscriptionStateChangeObserver", "done", "confirmationPromise", "onSignature", "__type", "PROCESSED", "subscriptionSetupPromise", "resolveSubscriptionSetup", "_onSubscriptionStateChange", "nextState", "getSignatureStatus", "abortConfirmation", "removeSignatureListener", "expiryPromise", "checkBlockHeight", "_e", "currentBlockHeight", "BLOCKHEIGHT_EXCEEDED", "cancellationPromise", "outcome", "race", "currentNonceValue", "lastCheckedSlot", "getCurrentNonceValue", "getNonceAndContext", "NONCE_INVALID", "slotInWhichNonceDidAdvance", "signatureStatus", "commitmentForStatus", "timeoutId", "timeoutMs", "TIMED_OUT", "clearTimeout", "getClusterNodes", "getVoteAccounts", "getSlotLeader", "getSlotLeaders", "startSlot", "limit", "getSignatureStatuses", "getTransactionCount", "getTotalSupply", "excludeNonCirculatingAccountsList", "getInflationGovernor", "getInflationReward", "getInflationRate", "getEpochInfo", "getEpochSchedule", "epochSchedule", "getLeaderSchedule", "getRecentBlockhashAndContext", "getLatestBlockhashAndContext", "getRecentPerformanceSamples", "getFeeCalculatorForBlockhash", "wireMessage", "getRecentPrioritizationFees", "lockedWritableAccounts", "getRecentBlockhash", "getLatestBlockhash", "isBlockhashValid", "getVersion", "getGenesisHash", "getBlock", "_buildArgsAtLeastConfirmed", "transactionDetails", "getParsedBlock", "getBlockProduction", "extra", "c", "getParsedTransaction", "getParsedTransactions", "getTransactions", "getConfirmedBlock", "block", "getBlocks", "endSlot", "getBlockSignatures", "getConfirmedBlockSignatures", "getConfirmedTransaction", "getParsedConfirmedTransaction", "getParsedConfirmedTransactions", "getConfirmedSignaturesForAddress", "firstAvailableBlock", "until", "highestConfirmedRoot", "before", "confirmedSignatureInfo", "getConfirmedSignaturesForAddress2", "getSignaturesForAddress", "getAddressLookupTable", "accountInfo", "getNonce", "requestAirdrop", "to", "_blockhashWithExpiryBlockHeight", "disableCache", "timeSinceFetch", "Date", "now", "expired", "_pollNewBlockhash", "startTime", "cachedLatestBlockhash", "cachedBlockhash", "getStakeMinimumDelegation", "simulateTransaction", "transactionOrMessage", "configOrSigners", "includeAccounts", "versionedTx", "encodedTransaction", "originalTx", "sigVerify", "traceIndent", "logTrace", "signersOrOptions", "sendRawTransaction", "rawTransaction", "sendEncodedTransaction", "setInterval", "_updateSubscriptions", "Number", "MAX_SAFE_INTEGER", "clearInterval", "hash", "_setSubscription", "nextSubscription", "prevState", "stateChangeCallbacks", "cb", "clientSubscriptionId", "close", "log", "connect", "activeWebSocketGeneration", "isCurrentConnectionStillActive", "callbacks", "serverSubscriptionId", "unsubscribeMethod", "_handleServerNotification", "callbackArgs", "notification", "_makeSubscription", "subscriptionConfig", "existingSubscription", "onAccountChange", "removeAccountChangeListener", "_unsubscribeClientSubscription", "accountId", "onProgramAccountChange", "maybeFilters", "removeProgramAccountChangeListener", "onLogs", "mentions", "removeOnLogsListener", "onSlotChange", "removeSlotChangeListener", "onSlotUpdate", "removeSlotUpdateListener", "subscriptionName", "dispose", "override", "_err", "onSignatureWithOptions", "onRootChange", "removeRootChangeListener", "Keypair", "keypair", "_keypair", "generate", "fromSecretKey", "skipValidation", "computedPublicKey", "ii", "fromSeed", "LOOKUP_TABLE_INSTRUCTION_LAYOUTS", "CreateLookupTable", "bigintLayout", "FreezeLookupTable", "ExtendLookupTable", "DeactivateLookupTable", "CloseLookupTable", "AddressLookupTableInstruction", "layoutType", "decodeCreateLookupTable", "checkKeysLength", "recentSlot", "decodeExtendLookupTable", "decodeCloseLookupTable", "recipient", "decodeFreezeLookupTable", "decodeDeactivateLookupTable", "AddressLookupTableProgram", "createLookupTable", "lookupTableAddress", "bumpSeed", "getU64Encoder", "freezeLookupTable", "extendLookupTable", "addr", "deactivateLookupTable", "closeLookupTable", "ComputeBudgetInstruction", "COMPUTE_BUDGET_INSTRUCTION_LAYOUTS", "decodeRequestUnits", "units", "additionalFee", "RequestUnits", "decodeRequestHeapFrame", "RequestHeapFrame", "decodeSetComputeUnitLimit", "SetComputeUnitLimit", "decodeSetComputeUnitPrice", "microLamports", "SetComputeUnitPrice", "ComputeBudgetProgram", "requestUnits", "requestHeapFrame", "setComputeUnitLimit", "setComputeUnitPrice", "PRIVATE_KEY_BYTES", "PUBLIC_KEY_BYTES", "SIGNATURE_BYTES", "ED25519_INSTRUCTION_LAYOUT", "u16", "Ed25519Program", "createInstructionWithPublicKey", "instructionIndex", "publicKeyOffset", "signatureOffset", "messageDataOffset", "numSignatures", "padding", "signatureInstructionIndex", "publicKeyInstructionIndex", "messageDataSize", "messageInstructionIndex", "createInstructionWithPrivateKey", "privateKey", "ecdsaSign", "msgHash", "privKey", "secp256k1", "toCompactRawBytes", "recovery", "isValidPrivateKey", "publicKeyCreate", "ETHEREUM_ADDRESS_BYTES", "SIGNATURE_OFFSETS_SERIALIZED_SIZE", "SECP256K1_INSTRUCTION_LAYOUT", "Secp256k1Program", "publicKeyToEthAddress", "keccak_256", "recoveryId", "createInstructionWithEthAddress", "ethAddress", "rawAddress", "substr", "dataStart", "ethAddressOffset", "ethAddressInstructionIndex", "pkey", "messageHash", "STAKE_CONFIG_ID", "Authorized", "staker", "withdrawer", "Lockup", "unixTimestamp", "custodian", "_Lockup", "StakeInstruction", "STAKE_INSTRUCTION_LAYOUTS", "decodeInitialize", "Initialize", "stakePubkey", "decodeDelegate", "Delegate", "decodeAuthorize", "newAuthorized", "stakeAuthorizationType", "Authorize", "o", "custodianPubkey", "decodeAuthorizeWithSeed", "authoritySeed", "authorityOwner", "AuthorizeWithSeed", "authorityBase", "decodeSplit", "Split", "splitStakePubkey", "decodeMerge", "Merge", "sourceStakePubKey", "decodeWithdraw", "Withdraw", "decodeDeactivate", "Deactivate", "StakeProgram", "StakeAuthorizationLayout", "Staker", "Withdrawer", "initialize", "maybeLockup", "delegate", "authorize", "authorizeWithSeed", "splitInstruction", "split", "rentExemptReserve", "splitWithSeed", "merge", "withdraw", "deactivate", "VoteInit", "authorizedVoter", "authorizedWithdrawer", "VoteInstruction", "VOTE_INSTRUCTION_LAYOUTS", "decodeInitializeAccount", "InitializeAccount", "voteAuthorizationType", "currentAuthorityDerivedKeyOwnerPubkey", "currentAuthorityDerivedKeySeed", "currentAuthorityDerivedKeyBasePubkey", "authorizedWithdrawerPubkey", "VoteProgram", "UpdateValidatorIdentity", "VoteAuthorizationLayout", "Voter", "initializeAccount", "safeWithdraw", "currentVoteAccountBalance", "rentExemptMinimum", "updateValidatorIdentity", "VALIDATOR_INFO_KEY", "InfoString", "website", "details", "iconUrl", "keybaseUsername", "ValidatorInfo", "fromConfigData", "configKeyCount", "configKeys", "rawInfo", "parse", "assertType", "VOTE_PROGRAM_ID", "VoteAccountLayout", "VoteAccount", "votes", "authorizedVoters", "priorVoters", "lastTimestamp", "versionOffset", "va", "rootSlotValid", "parseAuthorizedVoter", "getPriorVoters", "parsePriorVoters", "epochOfLastAuthorizedSwitch", "targetEpoch", "idx", "isEmpty", "http", "devnet", "testnet", "https", "clusterApiUrl", "cluster", "tls", "sendAndConfirmRawTransaction", "confirmationStrategyOrConfirmOptions", "maybeConfirmOptions", "confirmationStrategy", "LAMPORTS_PER_SOL"]
}
